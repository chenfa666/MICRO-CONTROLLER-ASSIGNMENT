
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc8  08004cc8  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc8  08004cc8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000b0  08004d80  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004d80  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129f8  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297c  00000000  00000000  00032ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b82b  00000000  00000000  00037550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135ad  00000000  00000000  00052d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c75e  00000000  00000000  00066328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  00102adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	00000000 	.word	0x00000000
 8000204:	08004be4 	.word	0x08004be4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b4 	.word	0x200000b4
 8000220:	08004be4 	.word	0x08004be4

08000224 <interruptServiceForDisplaySingleLED>:
{
	HAL_GPIO_TogglePin(PORT, PIN);
}

void interruptServiceForDisplaySingleLED()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (counter_led > 0)
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <interruptServiceForDisplaySingleLED+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dd0f      	ble.n	8000250 <interruptServiceForDisplaySingleLED+0x2c>
	{
		counter_led--;
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <interruptServiceForDisplaySingleLED+0x30>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3b01      	subs	r3, #1
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <interruptServiceForDisplaySingleLED+0x30>)
 8000238:	6013      	str	r3, [r2, #0]
		if (counter_led <= 0)
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <interruptServiceForDisplaySingleLED+0x30>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	dc06      	bgt.n	8000250 <interruptServiceForDisplaySingleLED+0x2c>
		{
			counter_led = TIME_DELAY_FOR_BLINKING_LED;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <interruptServiceForDisplaySingleLED+0x30>)
 8000244:	2232      	movs	r2, #50	; 0x32
 8000246:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_PIN);
 8000248:	2104      	movs	r1, #4
 800024a:	4803      	ldr	r0, [pc, #12]	; (8000258 <interruptServiceForDisplaySingleLED+0x34>)
 800024c:	f001 fe7a 	bl	8001f44 <HAL_GPIO_TogglePin>
		}
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000000 	.word	0x20000000
 8000258:	40010c00 	.word	0x40010c00

0800025c <isEqualToGo>:
int green_time, yellow_time;
//use only in this file
UART_HandleTypeDef huart3;

int isEqualToGo(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	if(data[0] == '0') return 1;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <isEqualToGo+0x1c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b30      	cmp	r3, #48	; 0x30
 8000266:	d101      	bne.n	800026c <isEqualToGo+0x10>
 8000268:	2301      	movs	r3, #1
 800026a:	e000      	b.n	800026e <isEqualToGo+0x12>
	else return 0;
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000148 	.word	0x20000148

0800027c <isEqualToGreen>:
	if (data[0] == '1') return 1;
	else return 0;
}

int isEqualToGreen(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	if (data[0] == '2') return 1;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <isEqualToGreen+0x1c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b32      	cmp	r3, #50	; 0x32
 8000286:	d101      	bne.n	800028c <isEqualToGreen+0x10>
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <isEqualToGreen+0x12>
	else return 0;
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	20000148 	.word	0x20000148

0800029c <isEqualToYellow>:

int isEqualToYellow(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	if (data[0] == '3') return 1;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <isEqualToYellow+0x1c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b33      	cmp	r3, #51	; 0x33
 80002a6:	d101      	bne.n	80002ac <isEqualToYellow+0x10>
 80002a8:	2301      	movs	r3, #1
 80002aa:	e000      	b.n	80002ae <isEqualToYellow+0x12>
	else return 0;
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000148 	.word	0x20000148

080002bc <isEqualToStop>:

int isEqualToStop(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	if(data[0] == '4') return 1;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <isEqualToStop+0x1c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b34      	cmp	r3, #52	; 0x34
 80002c6:	d101      	bne.n	80002cc <isEqualToStop+0x10>
 80002c8:	2301      	movs	r3, #1
 80002ca:	e000      	b.n	80002ce <isEqualToStop+0x12>
	else return 0;
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000148 	.word	0x20000148

080002dc <fsm_communication>:

void fsm_communication()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	switch(string_flag)
 80002e0:	4bbd      	ldr	r3, [pc, #756]	; (80005d8 <fsm_communication+0x2fc>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b06      	cmp	r3, #6
 80002e6:	f200 81d9 	bhi.w	800069c <fsm_communication+0x3c0>
 80002ea:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <fsm_communication+0x14>)
 80002ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f0:	0800030d 	.word	0x0800030d
 80002f4:	0800069d 	.word	0x0800069d
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	0800034d 	.word	0x0800034d
 8000300:	0800035b 	.word	0x0800035b
 8000304:	08000431 	.word	0x08000431
 8000308:	0800053f 	.word	0x0800053f
	{
	case INIT:
		// display the mode to the LCD
		Lcd_Goto_XY(0, 1);
 800030c:	2101      	movs	r1, #1
 800030e:	2000      	movs	r0, #0
 8000310:	f000 fe2d 	bl	8000f6e <Lcd_Goto_XY>
		Lcd_Send_String("PRESS 0 TO RUN");
 8000314:	48b1      	ldr	r0, [pc, #708]	; (80005dc <fsm_communication+0x300>)
 8000316:	f000 fe0e 	bl	8000f36 <Lcd_Send_String>

		// check if '0' is pressed
		if (isEqualToGo())
 800031a:	f7ff ff9f 	bl	800025c <isEqualToGo>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d003      	beq.n	800032c <fsm_communication+0x50>
		{
			string_flag = GO;
 8000324:	4bac      	ldr	r3, [pc, #688]	; (80005d8 <fsm_communication+0x2fc>)
 8000326:	2202      	movs	r2, #2
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e002      	b.n	8000332 <fsm_communication+0x56>
		}
		else string_flag = INIT;
 800032c:	4baa      	ldr	r3, [pc, #680]	; (80005d8 <fsm_communication+0x2fc>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
		data[0] = NULL;
 8000332:	4bab      	ldr	r3, [pc, #684]	; (80005e0 <fsm_communication+0x304>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
		break;
 8000338:	e1d3      	b.n	80006e2 <fsm_communication+0x406>
	case GO:
		string_flag = RUNNING;
 800033a:	4ba7      	ldr	r3, [pc, #668]	; (80005d8 <fsm_communication+0x2fc>)
 800033c:	2203      	movs	r2, #3
 800033e:	701a      	strb	r2, [r3, #0]
		Lcd_Clear_Display();
 8000340:	f000 fe0e 	bl	8000f60 <Lcd_Clear_Display>
		data[0] = NULL;
 8000344:	4ba6      	ldr	r3, [pc, #664]	; (80005e0 <fsm_communication+0x304>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
		break;
 800034a:	e1ca      	b.n	80006e2 <fsm_communication+0x406>
	case RUNNING:
		string_flag = NORMAL;
 800034c:	4ba2      	ldr	r3, [pc, #648]	; (80005d8 <fsm_communication+0x2fc>)
 800034e:	2204      	movs	r2, #4
 8000350:	701a      	strb	r2, [r3, #0]
		data[0] = NULL;
 8000352:	4ba3      	ldr	r3, [pc, #652]	; (80005e0 <fsm_communication+0x304>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
		break;
 8000358:	e1c3      	b.n	80006e2 <fsm_communication+0x406>
	case NORMAL:
		// TODO
		// display the mode to the LCD
		Lcd_Goto_XY(0, 5);
 800035a:	2105      	movs	r1, #5
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fe06 	bl	8000f6e <Lcd_Goto_XY>
		Lcd_Send_String("NORMAL");
 8000362:	48a0      	ldr	r0, [pc, #640]	; (80005e4 <fsm_communication+0x308>)
 8000364:	f000 fde7 	bl	8000f36 <Lcd_Send_String>

		if(value == 9 || value2 == 9)
 8000368:	4b9f      	ldr	r3, [pc, #636]	; (80005e8 <fsm_communication+0x30c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b09      	cmp	r3, #9
 800036e:	d003      	beq.n	8000378 <fsm_communication+0x9c>
 8000370:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <fsm_communication+0x310>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b09      	cmp	r3, #9
 8000376:	d12b      	bne.n	80003d0 <fsm_communication+0xf4>
		{
			Lcd_Clear_Display();
 8000378:	f000 fdf2 	bl	8000f60 <Lcd_Clear_Display>
			Lcd_Goto_XY(0, 5);
 800037c:	2105      	movs	r1, #5
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fdf5 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("NORMAL");
 8000384:	4897      	ldr	r0, [pc, #604]	; (80005e4 <fsm_communication+0x308>)
 8000386:	f000 fdd6 	bl	8000f36 <Lcd_Send_String>
			Lcd_Goto_XY(1, 0);
 800038a:	2100      	movs	r1, #0
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fdee 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("TIME");
 8000392:	4897      	ldr	r0, [pc, #604]	; (80005f0 <fsm_communication+0x314>)
 8000394:	f000 fdcf 	bl	8000f36 <Lcd_Send_String>
			Lcd_Goto_XY(1, 6);
 8000398:	2106      	movs	r1, #6
 800039a:	2001      	movs	r0, #1
 800039c:	f000 fde7 	bl	8000f6e <Lcd_Goto_XY>
			sprintf((char*) temp, "%lu", value);
 80003a0:	4b91      	ldr	r3, [pc, #580]	; (80005e8 <fsm_communication+0x30c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	4993      	ldr	r1, [pc, #588]	; (80005f4 <fsm_communication+0x318>)
 80003a8:	4893      	ldr	r0, [pc, #588]	; (80005f8 <fsm_communication+0x31c>)
 80003aa:	f003 ffe1 	bl	8004370 <siprintf>
			Lcd_Send_String(temp);
 80003ae:	4892      	ldr	r0, [pc, #584]	; (80005f8 <fsm_communication+0x31c>)
 80003b0:	f000 fdc1 	bl	8000f36 <Lcd_Send_String>
			Lcd_Goto_XY(1, 10);
 80003b4:	210a      	movs	r1, #10
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fdd9 	bl	8000f6e <Lcd_Goto_XY>
			sprintf((char*) temp, "%lu", value2);
 80003bc:	4b8b      	ldr	r3, [pc, #556]	; (80005ec <fsm_communication+0x310>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	498c      	ldr	r1, [pc, #560]	; (80005f4 <fsm_communication+0x318>)
 80003c4:	488c      	ldr	r0, [pc, #560]	; (80005f8 <fsm_communication+0x31c>)
 80003c6:	f003 ffd3 	bl	8004370 <siprintf>
			Lcd_Send_String(temp);
 80003ca:	488b      	ldr	r0, [pc, #556]	; (80005f8 <fsm_communication+0x31c>)
 80003cc:	f000 fdb3 	bl	8000f36 <Lcd_Send_String>

		}
		// countdown the remaining time of each green and yellow light
		Lcd_Goto_XY(1, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 fdcb 	bl	8000f6e <Lcd_Goto_XY>
		Lcd_Send_String("TIME");
 80003d8:	4885      	ldr	r0, [pc, #532]	; (80005f0 <fsm_communication+0x314>)
 80003da:	f000 fdac 	bl	8000f36 <Lcd_Send_String>
		Lcd_Goto_XY(1, 6);
 80003de:	2106      	movs	r1, #6
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fdc4 	bl	8000f6e <Lcd_Goto_XY>
		sprintf((char*) temp, "%lu", value);
 80003e6:	4b80      	ldr	r3, [pc, #512]	; (80005e8 <fsm_communication+0x30c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	4981      	ldr	r1, [pc, #516]	; (80005f4 <fsm_communication+0x318>)
 80003ee:	4882      	ldr	r0, [pc, #520]	; (80005f8 <fsm_communication+0x31c>)
 80003f0:	f003 ffbe 	bl	8004370 <siprintf>
		Lcd_Send_String(temp);
 80003f4:	4880      	ldr	r0, [pc, #512]	; (80005f8 <fsm_communication+0x31c>)
 80003f6:	f000 fd9e 	bl	8000f36 <Lcd_Send_String>
		Lcd_Goto_XY(1, 10);
 80003fa:	210a      	movs	r1, #10
 80003fc:	2001      	movs	r0, #1
 80003fe:	f000 fdb6 	bl	8000f6e <Lcd_Goto_XY>
		sprintf((char*) temp, "%lu", value2);
 8000402:	4b7a      	ldr	r3, [pc, #488]	; (80005ec <fsm_communication+0x310>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	497a      	ldr	r1, [pc, #488]	; (80005f4 <fsm_communication+0x318>)
 800040a:	487b      	ldr	r0, [pc, #492]	; (80005f8 <fsm_communication+0x31c>)
 800040c:	f003 ffb0 	bl	8004370 <siprintf>
		Lcd_Send_String(temp);
 8000410:	4879      	ldr	r0, [pc, #484]	; (80005f8 <fsm_communication+0x31c>)
 8000412:	f000 fd90 	bl	8000f36 <Lcd_Send_String>
		// check if '2' is pressed
		if (isEqualToGreen())
 8000416:	f7ff ff31 	bl	800027c <isEqualToGreen>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	f000 815b 	beq.w	80006d8 <fsm_communication+0x3fc>
		{
			data[0] = NULL;
 8000422:	4b6f      	ldr	r3, [pc, #444]	; (80005e0 <fsm_communication+0x304>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
			string_flag = ADJUST_GREEN;
 8000428:	4b6b      	ldr	r3, [pc, #428]	; (80005d8 <fsm_communication+0x2fc>)
 800042a:	2205      	movs	r2, #5
 800042c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800042e:	e153      	b.n	80006d8 <fsm_communication+0x3fc>
	case ADJUST_GREEN:
		// TODO
		// display the mode to the LCD
		if (first_time_pressed == 0)
 8000430:	4b72      	ldr	r3, [pc, #456]	; (80005fc <fsm_communication+0x320>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10e      	bne.n	8000456 <fsm_communication+0x17a>
		{
			Lcd_Goto_XY(0, 2);
 8000438:	2102      	movs	r1, #2
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fd97 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("ADJUST GREEN");
 8000440:	486f      	ldr	r0, [pc, #444]	; (8000600 <fsm_communication+0x324>)
 8000442:	f000 fd78 	bl	8000f36 <Lcd_Send_String>
			Lcd_Goto_XY(1, 0);
 8000446:	2100      	movs	r1, #0
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fd90 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("ENTER NEW VALUE");
 800044e:	486d      	ldr	r0, [pc, #436]	; (8000604 <fsm_communication+0x328>)
 8000450:	f000 fd71 	bl	8000f36 <Lcd_Send_String>
 8000454:	e006      	b.n	8000464 <fsm_communication+0x188>
		}
		else
		{
			Lcd_Goto_XY(0, 1);
 8000456:	2101      	movs	r1, #1
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fd88 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("VALUE UPDATED");
 800045e:	486a      	ldr	r0, [pc, #424]	; (8000608 <fsm_communication+0x32c>)
 8000460:	f000 fd69 	bl	8000f36 <Lcd_Send_String>
		}
		// check if '3' is pressed
		if (isEqualToYellow())
 8000464:	f7ff ff1a 	bl	800029c <isEqualToYellow>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d036      	beq.n	80004dc <fsm_communication+0x200>
		{
			if (first_time_pressed == 0)
 800046e:	4b63      	ldr	r3, [pc, #396]	; (80005fc <fsm_communication+0x320>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d128      	bne.n	80004c8 <fsm_communication+0x1ec>
			{
				green_time = (data[0] - (int)48) * 100;
 8000476:	4b5a      	ldr	r3, [pc, #360]	; (80005e0 <fsm_communication+0x304>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	3b30      	subs	r3, #48	; 0x30
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	4a62      	ldr	r2, [pc, #392]	; (800060c <fsm_communication+0x330>)
 8000484:	6013      	str	r3, [r2, #0]
				Lcd_Clear_Display();
 8000486:	f000 fd6b 	bl	8000f60 <Lcd_Clear_Display>
				Lcd_Goto_XY(1, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	2001      	movs	r0, #1
 800048e:	f000 fd6e 	bl	8000f6e <Lcd_Goto_XY>
				Lcd_Send_String("NEW VALUE:");
 8000492:	485f      	ldr	r0, [pc, #380]	; (8000610 <fsm_communication+0x334>)
 8000494:	f000 fd4f 	bl	8000f36 <Lcd_Send_String>
				Lcd_Goto_XY(1, 12);
 8000498:	210c      	movs	r1, #12
 800049a:	2001      	movs	r0, #1
 800049c:	f000 fd67 	bl	8000f6e <Lcd_Goto_XY>
				sprintf((char*) temp1, "%lu", green_time / 100);
 80004a0:	4b5a      	ldr	r3, [pc, #360]	; (800060c <fsm_communication+0x330>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a5b      	ldr	r2, [pc, #364]	; (8000614 <fsm_communication+0x338>)
 80004a6:	fb82 1203 	smull	r1, r2, r2, r3
 80004aa:	1152      	asrs	r2, r2, #5
 80004ac:	17db      	asrs	r3, r3, #31
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	4950      	ldr	r1, [pc, #320]	; (80005f4 <fsm_communication+0x318>)
 80004b4:	4858      	ldr	r0, [pc, #352]	; (8000618 <fsm_communication+0x33c>)
 80004b6:	f003 ff5b 	bl	8004370 <siprintf>
				Lcd_Send_String(temp1);
 80004ba:	4857      	ldr	r0, [pc, #348]	; (8000618 <fsm_communication+0x33c>)
 80004bc:	f000 fd3b 	bl	8000f36 <Lcd_Send_String>
				first_time_pressed = 1;
 80004c0:	4b4e      	ldr	r3, [pc, #312]	; (80005fc <fsm_communication+0x320>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e005      	b.n	80004d4 <fsm_communication+0x1f8>
			}
			else
			{
				string_flag = ADJUST_YELLOW;
 80004c8:	4b43      	ldr	r3, [pc, #268]	; (80005d8 <fsm_communication+0x2fc>)
 80004ca:	2206      	movs	r2, #6
 80004cc:	701a      	strb	r2, [r3, #0]
				first_time_pressed = 0;
 80004ce:	4b4b      	ldr	r3, [pc, #300]	; (80005fc <fsm_communication+0x320>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
			}
			data[0] = NULL;
 80004d4:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <fsm_communication+0x304>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
				Lcd_Send_String(temp1);
				data[0] = NULL;
				first_time_pressed = 1;
			}
		}
		break;
 80004da:	e0ff      	b.n	80006dc <fsm_communication+0x400>
			if (data[0] != NULL)
 80004dc:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <fsm_communication+0x304>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	f000 80fb 	beq.w	80006dc <fsm_communication+0x400>
				green_time = (data[0] - (int)48) * 100;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <fsm_communication+0x304>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3b30      	subs	r3, #48	; 0x30
 80004ec:	2264      	movs	r2, #100	; 0x64
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	4a46      	ldr	r2, [pc, #280]	; (800060c <fsm_communication+0x330>)
 80004f4:	6013      	str	r3, [r2, #0]
				Lcd_Clear_Display();
 80004f6:	f000 fd33 	bl	8000f60 <Lcd_Clear_Display>
				Lcd_Goto_XY(1, 0);
 80004fa:	2100      	movs	r1, #0
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fd36 	bl	8000f6e <Lcd_Goto_XY>
				Lcd_Send_String("NEW VALUE:");
 8000502:	4843      	ldr	r0, [pc, #268]	; (8000610 <fsm_communication+0x334>)
 8000504:	f000 fd17 	bl	8000f36 <Lcd_Send_String>
				Lcd_Goto_XY(1, 12);
 8000508:	210c      	movs	r1, #12
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fd2f 	bl	8000f6e <Lcd_Goto_XY>
				sprintf((char*) temp1, "%lu", green_time / 100);
 8000510:	4b3e      	ldr	r3, [pc, #248]	; (800060c <fsm_communication+0x330>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <fsm_communication+0x338>)
 8000516:	fb82 1203 	smull	r1, r2, r2, r3
 800051a:	1152      	asrs	r2, r2, #5
 800051c:	17db      	asrs	r3, r3, #31
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4934      	ldr	r1, [pc, #208]	; (80005f4 <fsm_communication+0x318>)
 8000524:	483c      	ldr	r0, [pc, #240]	; (8000618 <fsm_communication+0x33c>)
 8000526:	f003 ff23 	bl	8004370 <siprintf>
				Lcd_Send_String(temp1);
 800052a:	483b      	ldr	r0, [pc, #236]	; (8000618 <fsm_communication+0x33c>)
 800052c:	f000 fd03 	bl	8000f36 <Lcd_Send_String>
				data[0] = NULL;
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <fsm_communication+0x304>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
				first_time_pressed = 1;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <fsm_communication+0x320>)
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
		break;
 800053c:	e0ce      	b.n	80006dc <fsm_communication+0x400>
	case ADJUST_YELLOW:
		// TODO
		// display the mode to the LCD
		if (first_time_pressed == 0)
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <fsm_communication+0x320>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10e      	bne.n	8000564 <fsm_communication+0x288>
		{
			Lcd_Goto_XY(0, 1);
 8000546:	2101      	movs	r1, #1
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fd10 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("ADJUST YELLOW");
 800054e:	4833      	ldr	r0, [pc, #204]	; (800061c <fsm_communication+0x340>)
 8000550:	f000 fcf1 	bl	8000f36 <Lcd_Send_String>
			Lcd_Goto_XY(1, 0);
 8000554:	2100      	movs	r1, #0
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fd09 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("ENTER NEW VALUE");
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <fsm_communication+0x328>)
 800055e:	f000 fcea 	bl	8000f36 <Lcd_Send_String>
 8000562:	e006      	b.n	8000572 <fsm_communication+0x296>
		}
		else
		{
			Lcd_Goto_XY(0, 1);
 8000564:	2101      	movs	r1, #1
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fd01 	bl	8000f6e <Lcd_Goto_XY>
			Lcd_Send_String("VALUE UPDATED");
 800056c:	4826      	ldr	r0, [pc, #152]	; (8000608 <fsm_communication+0x32c>)
 800056e:	f000 fce2 	bl	8000f36 <Lcd_Send_String>
		}
		// check if '4' is pressed
		if (isEqualToStop())
 8000572:	f7ff fea3 	bl	80002bc <isEqualToStop>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d05f      	beq.n	800063c <fsm_communication+0x360>
		{
			if (first_time_pressed == 0)
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <fsm_communication+0x320>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d14f      	bne.n	8000624 <fsm_communication+0x348>
			{
				yellow_time = (data[0] - (int)48) * 100;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <fsm_communication+0x304>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3b30      	subs	r3, #48	; 0x30
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	4a23      	ldr	r2, [pc, #140]	; (8000620 <fsm_communication+0x344>)
 8000592:	6013      	str	r3, [r2, #0]
				Lcd_Clear_Display();
 8000594:	f000 fce4 	bl	8000f60 <Lcd_Clear_Display>
				Lcd_Goto_XY(1, 0);
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fce7 	bl	8000f6e <Lcd_Goto_XY>
				Lcd_Send_String("NEW VALUE:");
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <fsm_communication+0x334>)
 80005a2:	f000 fcc8 	bl	8000f36 <Lcd_Send_String>
				Lcd_Goto_XY(1, 12);
 80005a6:	210c      	movs	r1, #12
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fce0 	bl	8000f6e <Lcd_Goto_XY>
				sprintf((char*) temp1, "%lu", yellow_time / 100);
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <fsm_communication+0x344>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <fsm_communication+0x338>)
 80005b4:	fb82 1203 	smull	r1, r2, r2, r3
 80005b8:	1152      	asrs	r2, r2, #5
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <fsm_communication+0x318>)
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <fsm_communication+0x33c>)
 80005c4:	f003 fed4 	bl	8004370 <siprintf>
				Lcd_Send_String(temp1);
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <fsm_communication+0x33c>)
 80005ca:	f000 fcb4 	bl	8000f36 <Lcd_Send_String>
				first_time_pressed = 1;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <fsm_communication+0x320>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e02e      	b.n	8000634 <fsm_communication+0x358>
 80005d6:	bf00      	nop
 80005d8:	200000cc 	.word	0x200000cc
 80005dc:	08004bfc 	.word	0x08004bfc
 80005e0:	20000148 	.word	0x20000148
 80005e4:	08004c0c 	.word	0x08004c0c
 80005e8:	200000e4 	.word	0x200000e4
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	08004c14 	.word	0x08004c14
 80005f4:	08004c1c 	.word	0x08004c1c
 80005f8:	2000013c 	.word	0x2000013c
 80005fc:	200000d0 	.word	0x200000d0
 8000600:	08004c20 	.word	0x08004c20
 8000604:	08004c30 	.word	0x08004c30
 8000608:	08004c40 	.word	0x08004c40
 800060c:	20000014 	.word	0x20000014
 8000610:	08004c50 	.word	0x08004c50
 8000614:	51eb851f 	.word	0x51eb851f
 8000618:	20000140 	.word	0x20000140
 800061c:	08004c5c 	.word	0x08004c5c
 8000620:	20000018 	.word	0x20000018
			}
			else
			{
				string_flag = EXIT;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <fsm_communication+0x40c>)
 8000626:	2207      	movs	r2, #7
 8000628:	701a      	strb	r2, [r3, #0]
				Lcd_Clear_Display();
 800062a:	f000 fc99 	bl	8000f60 <Lcd_Clear_Display>
				first_time_pressed = 0;
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <fsm_communication+0x410>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
			}
			data[0] = NULL;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <fsm_communication+0x414>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
				Lcd_Send_String(temp1);
				data[0] = NULL;
				first_time_pressed = 1;
			}
		}
		break;
 800063a:	e051      	b.n	80006e0 <fsm_communication+0x404>
			if (data[0] != NULL)
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <fsm_communication+0x414>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d04d      	beq.n	80006e0 <fsm_communication+0x404>
				yellow_time = (data[0] - (int)48) * 100;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <fsm_communication+0x414>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3b30      	subs	r3, #48	; 0x30
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <fsm_communication+0x418>)
 8000652:	6013      	str	r3, [r2, #0]
				Lcd_Clear_Display();
 8000654:	f000 fc84 	bl	8000f60 <Lcd_Clear_Display>
				Lcd_Goto_XY(1, 0);
 8000658:	2100      	movs	r1, #0
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fc87 	bl	8000f6e <Lcd_Goto_XY>
				Lcd_Send_String("NEW VALUE:");
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <fsm_communication+0x41c>)
 8000662:	f000 fc68 	bl	8000f36 <Lcd_Send_String>
				Lcd_Goto_XY(1, 12);
 8000666:	210c      	movs	r1, #12
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fc80 	bl	8000f6e <Lcd_Goto_XY>
				sprintf((char*) temp1, "%lu", yellow_time / 100);
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <fsm_communication+0x418>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <fsm_communication+0x420>)
 8000674:	fb82 1203 	smull	r1, r2, r2, r3
 8000678:	1152      	asrs	r2, r2, #5
 800067a:	17db      	asrs	r3, r3, #31
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	461a      	mov	r2, r3
 8000680:	491f      	ldr	r1, [pc, #124]	; (8000700 <fsm_communication+0x424>)
 8000682:	4820      	ldr	r0, [pc, #128]	; (8000704 <fsm_communication+0x428>)
 8000684:	f003 fe74 	bl	8004370 <siprintf>
				Lcd_Send_String(temp1);
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <fsm_communication+0x428>)
 800068a:	f000 fc54 	bl	8000f36 <Lcd_Send_String>
				data[0] = NULL;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <fsm_communication+0x414>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
				first_time_pressed = 1;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <fsm_communication+0x410>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
		break;
 800069a:	e021      	b.n	80006e0 <fsm_communication+0x404>
	default:
		// reset all counters
		string_flag = INIT;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <fsm_communication+0x40c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		data[0]  = NULL;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <fsm_communication+0x414>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
		counter  = 500;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <fsm_communication+0x42c>)
 80006aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ae:	601a      	str	r2, [r3, #0]
		another_counter = 500;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <fsm_communication+0x430>)
 80006b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b6:	601a      	str	r2, [r3, #0]
		counter1 = 100;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <fsm_communication+0x434>)
 80006ba:	2264      	movs	r2, #100	; 0x64
 80006bc:	601a      	str	r2, [r3, #0]
		counter2 = 100;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <fsm_communication+0x438>)
 80006c0:	2264      	movs	r2, #100	; 0x64
 80006c2:	601a      	str	r2, [r3, #0]
		index0   = 0;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <fsm_communication+0x43c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		index1   = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <fsm_communication+0x440>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
		index2   = 0;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <fsm_communication+0x444>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <fsm_communication+0x406>
		break;
 80006d8:	bf00      	nop
 80006da:	e002      	b.n	80006e2 <fsm_communication+0x406>
		break;
 80006dc:	bf00      	nop
 80006de:	e000      	b.n	80006e2 <fsm_communication+0x406>
		break;
 80006e0:	bf00      	nop
	}
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000cc 	.word	0x200000cc
 80006ec:	200000d0 	.word	0x200000d0
 80006f0:	20000148 	.word	0x20000148
 80006f4:	20000018 	.word	0x20000018
 80006f8:	08004c50 	.word	0x08004c50
 80006fc:	51eb851f 	.word	0x51eb851f
 8000700:	08004c1c 	.word	0x08004c1c
 8000704:	20000140 	.word	0x20000140
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004
 8000710:	2000000c 	.word	0x2000000c
 8000714:	20000010 	.word	0x20000010
 8000718:	200000d8 	.word	0x200000d8
 800071c:	200000dc 	.word	0x200000dc
 8000720:	200000e0 	.word	0x200000e0

08000724 <resetCounter>:
uint32_t LEDsBuffer[BUFFER_SIZE] = {0x80100, 0x80C00, 0x06000, 0x32000},
		 GREEN_LEDs[2] 			 = {0x04100, 0x00000},
		 YELLOW_LEDs[2] 		 = {0x30C00, 0x00000};
static uint32_t baseComparator 	 =  0x80000;
void resetCounter(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	switch (index0)
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <resetCounter+0x80>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d833      	bhi.n	8000798 <resetCounter+0x74>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <resetCounter+0x14>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000749 	.word	0x08000749
 800073c:	08000765 	.word	0x08000765
 8000740:	08000771 	.word	0x08000771
 8000744:	0800078d 	.word	0x0800078d
	{
	case 0:
		another_counter = green_time + yellow_time;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <resetCounter+0x84>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <resetCounter+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4413      	add	r3, r2
 8000752:	461a      	mov	r2, r3
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <resetCounter+0x8c>)
 8000756:	601a      	str	r2, [r3, #0]
		counter = green_time;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <resetCounter+0x84>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <resetCounter+0x90>)
 8000760:	601a      	str	r2, [r3, #0]
		break;
 8000762:	e01a      	b.n	800079a <resetCounter+0x76>
	case 1:
		counter = yellow_time;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <resetCounter+0x88>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <resetCounter+0x90>)
 800076c:	601a      	str	r2, [r3, #0]
		break;
 800076e:	e014      	b.n	800079a <resetCounter+0x76>
	case 2:
		counter = green_time + yellow_time;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <resetCounter+0x84>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <resetCounter+0x88>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4413      	add	r3, r2
 800077a:	461a      	mov	r2, r3
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <resetCounter+0x90>)
 800077e:	601a      	str	r2, [r3, #0]
		another_counter = green_time;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <resetCounter+0x84>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <resetCounter+0x8c>)
 8000788:	601a      	str	r2, [r3, #0]
		break;
 800078a:	e006      	b.n	800079a <resetCounter+0x76>
	case 3:
		another_counter = yellow_time;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <resetCounter+0x88>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <resetCounter+0x8c>)
 8000794:	601a      	str	r2, [r3, #0]
		break;
 8000796:	e000      	b.n	800079a <resetCounter+0x76>
	default: break;
 8000798:	bf00      	nop
	}
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	20000014 	.word	0x20000014
 80007ac:	20000018 	.word	0x20000018
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000008 	.word	0x20000008

080007b8 <Latch_Enable>:

void Latch_Enable(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2110      	movs	r1, #16
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <Latch_Enable+0x14>)
 80007c2:	f001 fba7 	bl	8001f14 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40011000 	.word	0x40011000

080007d0 <Latch_Disable>:

void Latch_Disable(int counter)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (counter <= 0) return;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dd0b      	ble.n	80007f6 <Latch_Disable+0x26>
		while (counter-- != 0) {
 80007de:	e004      	b.n	80007ea <Latch_Disable+0x1a>
			HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <Latch_Disable+0x30>)
 80007e6:	f001 fb95 	bl	8001f14 <HAL_GPIO_WritePin>
		while (counter-- != 0) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f5      	bne.n	80007e0 <Latch_Disable+0x10>
 80007f4:	e000      	b.n	80007f8 <Latch_Disable+0x28>
	if (counter <= 0) return;
 80007f6:	bf00      	nop
		}
}
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40011000 	.word	0x40011000

08000804 <Output_Enable>:

void Output_Enable(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2120      	movs	r1, #32
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <Output_Enable+0x14>)
 800080e:	f001 fb81 	bl	8001f14 <HAL_GPIO_WritePin>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40011000 	.word	0x40011000

0800081c <CLock_ON>:
{
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
}

void CLock_ON(int counter)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	if (counter <= 0) return;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	dd0b      	ble.n	8000842 <CLock_ON+0x26>
			while (counter-- != 0) {
 800082a:	e004      	b.n	8000836 <CLock_ON+0x1a>
				HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2108      	movs	r1, #8
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <CLock_ON+0x30>)
 8000832:	f001 fb6f 	bl	8001f14 <HAL_GPIO_WritePin>
			while (counter-- != 0) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f5      	bne.n	800082c <CLock_ON+0x10>
 8000840:	e000      	b.n	8000844 <CLock_ON+0x28>
	if (counter <= 0) return;
 8000842:	bf00      	nop
			}
}
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40011000 	.word	0x40011000

08000850 <CLock_OFF>:

void CLock_OFF(int counter)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if (counter <= 0) return;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	dd0b      	ble.n	8000876 <CLock_OFF+0x26>
			while (counter-- != 0) {
 800085e:	e004      	b.n	800086a <CLock_OFF+0x1a>
				HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2108      	movs	r1, #8
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <CLock_OFF+0x30>)
 8000866:	f001 fb55 	bl	8001f14 <HAL_GPIO_WritePin>
			while (counter-- != 0) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f5      	bne.n	8000860 <CLock_OFF+0x10>
 8000874:	e000      	b.n	8000878 <CLock_OFF+0x28>
	if (counter <= 0) return;
 8000876:	bf00      	nop
			}
}
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40011000 	.word	0x40011000

08000884 <Data_Out>:

void Data_Out(GPIO_PinState state)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, state);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	461a      	mov	r2, r3
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <Data_Out+0x20>)
 8000896:	f001 fb3d 	bl	8001f14 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40011000 	.word	0x40011000

080008a8 <turnOffAllLED>:

void turnOffAllLED()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	uint8_t i;
	Latch_Disable(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ff8e 	bl	80007d0 <Latch_Disable>
	for (i = 0; i <= 19; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	e00b      	b.n	80008d2 <turnOffAllLED+0x2a>
	{
		CLock_OFF(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ffc8 	bl	8000850 <CLock_OFF>
		Data_Out(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ffdf 	bl	8000884 <Data_Out>
		CLock_ON(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f7ff ffa8 	bl	800081c <CLock_ON>
	for (i = 0; i <= 19; i++)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	3301      	adds	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b13      	cmp	r3, #19
 80008d6:	d9f0      	bls.n	80008ba <turnOffAllLED+0x12>
	}
	Latch_Enable();
 80008d8:	f7ff ff6e 	bl	80007b8 <Latch_Enable>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LED_Display>:

void LED_Display(uint32_t data, int size)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	uint8_t i;
	Latch_Disable(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff ff6e 	bl	80007d0 <Latch_Disable>
	for (i = 0; i < 20; i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e019      	b.n	800092e <LED_Display+0x4a>
	{
		CLock_OFF(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ffa8 	bl	8000850 <CLock_OFF>
		Data_Out((data & baseComparator) == baseComparator);
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <LED_Display+0x5c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	401a      	ands	r2, r3
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <LED_Display+0x5c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	bf0c      	ite	eq
 8000910:	2301      	moveq	r3, #1
 8000912:	2300      	movne	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffb4 	bl	8000884 <Data_Out>
		data = data << 1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	607b      	str	r3, [r7, #4]
		CLock_ON(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f7ff ff7a 	bl	800081c <CLock_ON>
	for (i = 0; i < 20; i++)
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	3301      	adds	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b13      	cmp	r3, #19
 8000932:	d9e2      	bls.n	80008fa <LED_Display+0x16>
	}
	Latch_Enable();
 8000934:	f7ff ff40 	bl	80007b8 <Latch_Enable>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000003c 	.word	0x2000003c

08000944 <interruptServiceForDisplayLEDsSeries>:

void interruptServiceForDisplayLEDsSeries()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
			{
				index0 = 0;
			}
		}
	}*/
	if (counter > 0 || another_counter > 0)
 8000948:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <interruptServiceForDisplayLEDsSeries+0x14>
 8000950:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d07f      	beq.n	8000a58 <interruptServiceForDisplayLEDsSeries+0x114>
	{
		if (counter % TIME_DELAY_FOR_LED_SERIRES == 0 ||
 8000958:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 800095e:	fba3 1302 	umull	r1, r3, r3, r2
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2164      	movs	r1, #100	; 0x64
 8000966:	fb01 f303 	mul.w	r3, r1, r3
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00b      	beq.n	8000988 <interruptServiceForDisplayLEDsSeries+0x44>
			another_counter % TIME_DELAY_FOR_LED_SERIRES ==0)
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 8000976:	fba3 1302 	umull	r1, r3, r3, r2
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	2164      	movs	r1, #100	; 0x64
 800097e:	fb01 f303 	mul.w	r3, r1, r3
 8000982:	1ad3      	subs	r3, r2, r3
		if (counter % TIME_DELAY_FOR_LED_SERIRES == 0 ||
 8000984:	2b00      	cmp	r3, #0
 8000986:	d129      	bne.n	80009dc <interruptServiceForDisplayLEDsSeries+0x98>
		{
			if (status % 2 == 1)
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <interruptServiceForDisplayLEDsSeries+0x124>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	bfb8      	it	lt
 8000994:	425b      	neglt	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d110      	bne.n	80009bc <interruptServiceForDisplayLEDsSeries+0x78>
			{
				value  = (counter / TIME_DELAY_FOR_LED_SERIRES);
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <interruptServiceForDisplayLEDsSeries+0x128>)
 80009a8:	6013      	str	r3, [r2, #0]
				value2 = (another_counter / TIME_DELAY_FOR_LED_SERIRES);
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <interruptServiceForDisplayLEDsSeries+0x12c>)
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e00f      	b.n	80009dc <interruptServiceForDisplayLEDsSeries+0x98>
			}
			else
			{
				value2 = (another_counter / TIME_DELAY_FOR_LED_SERIRES);
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <interruptServiceForDisplayLEDsSeries+0x12c>)
 80009ca:	6013      	str	r3, [r2, #0]
				value = (counter / TIME_DELAY_FOR_LED_SERIRES);
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <interruptServiceForDisplayLEDsSeries+0x120>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <interruptServiceForDisplayLEDsSeries+0x128>)
 80009da:	6013      	str	r3, [r2, #0]
			}
		}
		if (counter > 0)
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <interruptServiceForDisplayLEDsSeries+0xaa>
		{
			counter--;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 80009ec:	6013      	str	r3, [r2, #0]
		}
		if (another_counter>0)
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <interruptServiceForDisplayLEDsSeries+0xbc>
		{
			another_counter--;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 80009fe:	6013      	str	r3, [r2, #0]
		}
		if (counter <= 0 || another_counter <= 0)
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <interruptServiceForDisplayLEDsSeries+0x118>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <interruptServiceForDisplayLEDsSeries+0xcc>
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <interruptServiceForDisplayLEDsSeries+0x11c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d123      	bne.n	8000a58 <interruptServiceForDisplayLEDsSeries+0x114>
		{
			resetCounter();
 8000a10:	f7ff fe88 	bl	8000724 <resetCounter>
			if (index0 == 0 || index0 == 2)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <interruptServiceForDisplayLEDsSeries+0xe0>
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d104      	bne.n	8000a2e <interruptServiceForDisplayLEDsSeries+0xea>
			{
				status++;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <interruptServiceForDisplayLEDsSeries+0x124>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <interruptServiceForDisplayLEDsSeries+0x124>)
 8000a2c:	6013      	str	r3, [r2, #0]
			}
			LED_Display(LEDsBuffer[index0], BUFFER_SIZE);
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <interruptServiceForDisplayLEDsSeries+0x134>)
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff52 	bl	80008e4 <LED_Display>
			index0++;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a48:	6013      	str	r3, [r2, #0]
			if (index0 == BUFFER_SIZE)
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d102      	bne.n	8000a58 <interruptServiceForDisplayLEDsSeries+0x114>
			{
				index0 = 0;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <interruptServiceForDisplayLEDsSeries+0x130>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004
 8000a64:	51eb851f 	.word	0x51eb851f
 8000a68:	200000d4 	.word	0x200000d4
 8000a6c:	200000e4 	.word	0x200000e4
 8000a70:	200000e8 	.word	0x200000e8
 8000a74:	200000d8 	.word	0x200000d8
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <interruptServiceForDisplayGREENLEDsSeries>:

void interruptServiceForDisplayGREENLEDsSeries()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <interruptServiceForDisplayGREENLEDsSeries+0x54>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d020      	beq.n	8000aca <interruptServiceForDisplayGREENLEDsSeries+0x4e>
	{
		counter1--;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <interruptServiceForDisplayGREENLEDsSeries+0x54>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <interruptServiceForDisplayGREENLEDsSeries+0x54>)
 8000a90:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <interruptServiceForDisplayGREENLEDsSeries+0x54>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d117      	bne.n	8000aca <interruptServiceForDisplayGREENLEDsSeries+0x4e>
		{
			counter1 = 100;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <interruptServiceForDisplayGREENLEDsSeries+0x54>)
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	601a      	str	r2, [r3, #0]
			LED_Display(GREEN_LEDs[index1], 2);
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <interruptServiceForDisplayGREENLEDsSeries+0x58>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <interruptServiceForDisplayGREENLEDsSeries+0x5c>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff19 	bl	80008e4 <LED_Display>
			index1++;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <interruptServiceForDisplayGREENLEDsSeries+0x58>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <interruptServiceForDisplayGREENLEDsSeries+0x58>)
 8000aba:	6013      	str	r3, [r2, #0]
			if (index1 == BUFFER_GREEN_SIZE)
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <interruptServiceForDisplayGREENLEDsSeries+0x58>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d102      	bne.n	8000aca <interruptServiceForDisplayGREENLEDsSeries+0x4e>
			{
				index1 = 0;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <interruptServiceForDisplayGREENLEDsSeries+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000000c 	.word	0x2000000c
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	2000002c 	.word	0x2000002c

08000adc <interruptServiceForDisplayYELLOWLEDsSeries>:

void interruptServiceForDisplayYELLOWLEDsSeries()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	if (counter2 > 0)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <interruptServiceForDisplayYELLOWLEDsSeries+0x54>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d020      	beq.n	8000b2a <interruptServiceForDisplayYELLOWLEDsSeries+0x4e>
	{
		counter2--;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <interruptServiceForDisplayYELLOWLEDsSeries+0x54>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <interruptServiceForDisplayYELLOWLEDsSeries+0x54>)
 8000af0:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <interruptServiceForDisplayYELLOWLEDsSeries+0x54>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d117      	bne.n	8000b2a <interruptServiceForDisplayYELLOWLEDsSeries+0x4e>
		{
			counter2 = 100;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <interruptServiceForDisplayYELLOWLEDsSeries+0x54>)
 8000afc:	2264      	movs	r2, #100	; 0x64
 8000afe:	601a      	str	r2, [r3, #0]
			LED_Display(YELLOW_LEDs[index2], 2);
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <interruptServiceForDisplayYELLOWLEDsSeries+0x58>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <interruptServiceForDisplayYELLOWLEDsSeries+0x5c>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fee9 	bl	80008e4 <LED_Display>
			index2++;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <interruptServiceForDisplayYELLOWLEDsSeries+0x58>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <interruptServiceForDisplayYELLOWLEDsSeries+0x58>)
 8000b1a:	6013      	str	r3, [r2, #0]
			if (index2 == BUFFER_YELLOW_SIZE)
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <interruptServiceForDisplayYELLOWLEDsSeries+0x58>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d102      	bne.n	8000b2a <interruptServiceForDisplayYELLOWLEDsSeries+0x4e>
			{
				index2 = 0;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <interruptServiceForDisplayYELLOWLEDsSeries+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000010 	.word	0x20000010
 8000b34:	200000e0 	.word	0x200000e0
 8000b38:	20000034 	.word	0x20000034

08000b3c <I2C_Init>:
/* Private variables ---------------------------------------------------------*/
/* I2C handler declaration */
I2C_HandleTypeDef I2cHandle;


void I2C_Init(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	/*##-1- Configure the I2C peripheral ######################################*/
	  I2cHandle.Instance             = I2C1;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <I2C_Init+0x54>)
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <I2C_Init+0x58>)
 8000b44:	601a      	str	r2, [r3, #0]
	  I2cHandle.Init.ClockSpeed      = I2C_SPEEDCLOCK;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <I2C_Init+0x54>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <I2C_Init+0x5c>)
 8000b4a:	605a      	str	r2, [r3, #4]
	  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <I2C_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
	  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <I2C_Init+0x54>)
 8000b54:	f240 320f 	movw	r2, #783	; 0x30f
 8000b58:	60da      	str	r2, [r3, #12]
	  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <I2C_Init+0x54>)
 8000b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b60:	611a      	str	r2, [r3, #16]
	  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <I2C_Init+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
	  I2cHandle.Init.OwnAddress2     = 0xFF;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <I2C_Init+0x54>)
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	619a      	str	r2, [r3, #24]
	  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <I2C_Init+0x54>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
	  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <I2C_Init+0x54>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]

	  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <I2C_Init+0x54>)
 8000b7c:	f001 f9fc 	bl	8001f78 <HAL_I2C_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <I2C_Init+0x4e>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000b86:	f000 fbcf 	bl	8001328 <Error_Handler>
	  }
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000014c 	.word	0x2000014c
 8000b94:	40005400 	.word	0x40005400
 8000b98:	00061a80 	.word	0x00061a80

08000b9c <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <FaBoLCD_PCF8574+0x4c>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <FaBoLCD_PCF8574+0x50>)
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 8000bb6:	f107 020c 	add.w	r2, r7, #12
 8000bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2142      	movs	r1, #66	; 0x42
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <FaBoLCD_PCF8574+0x54>)
 8000bc6:	f001 fb1b 	bl	8002200 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f000 fd9a 	bl	8001704 <HAL_Delay>
  init();
 8000bd0:	f000 f810 	bl	8000bf4 <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 f817 	bl	8000c0c <begin>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001a7 	.word	0x200001a7
 8000bec:	200001a4 	.word	0x200001a4
 8000bf0:	2000014c 	.word	0x2000014c

08000bf4 <init>:

/**
 @brief init
*/
void init()
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <init+0x14>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200001a9 	.word	0x200001a9

08000c0c <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d906      	bls.n	8000c32 <begin+0x26>
	_displayfunction |= LCD_2LINE;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <begin+0xc8>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <begin+0xc8>)
 8000c30:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <begin+0xcc>)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	3340      	adds	r3, #64	; 0x40
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f84f 	bl	8000ce4 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <begin+0x54>
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d106      	bne.n	8000c60 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <begin+0xc8>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <begin+0xc8>)
 8000c5e:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f000 fd4f 	bl	8001704 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f922 	bl	8000eb0 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f90e 	bl	8000e8e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 8000c72:	2005      	movs	r0, #5
 8000c74:	f000 fd46 	bl	8001704 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f908 	bl	8000e8e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 8000c7e:	2005      	movs	r0, #5
 8000c80:	f000 fd40 	bl	8001704 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f902 	bl	8000e8e <write4bits>
  HAL_Delay(2);
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f000 fd3a 	bl	8001704 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f000 f8fc 	bl	8000e8e <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <begin+0xc8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	f043 0320 	orr.w	r3, r3, #32
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f88f 	bl	8000dc4 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <begin+0xd0>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	701a      	strb	r2, [r3, #0]
  display();
 8000cac:	f000 f874 	bl	8000d98 <display>

  // clear it off
  clear();
 8000cb0:	f000 f836 	bl	8000d20 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <begin+0xd4>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <begin+0xd4>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f87d 	bl	8000dc4 <command>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001a9 	.word	0x200001a9
 8000cd8:	200001a6 	.word	0x200001a6
 8000cdc:	200001a5 	.word	0x200001a5
 8000ce0:	200001a8 	.word	0x200001a8

08000ce4 <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <setRowOffsets+0x38>)
 8000cf8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <setRowOffsets+0x38>)
 8000d00:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <setRowOffsets+0x38>)
 8000d08:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <setRowOffsets+0x38>)
 8000d10:	70da      	strb	r2, [r3, #3]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	200001a0 	.word	0x200001a0

08000d20 <clear>:

/**
 @brief clear
*/
void clear()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 f84d 	bl	8000dc4 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f000 fcea 	bl	8001704 <HAL_Delay>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000d44:	2304      	movs	r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d803      	bhi.n	8000d58 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <setCursor+0x5c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d303      	bcc.n	8000d6a <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <setCursor+0x5c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <setCursor+0x60>)
 8000d6e:	5cd2      	ldrb	r2, [r2, r3]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4413      	add	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f81f 	bl	8000dc4 <command>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001a6 	.word	0x200001a6
 8000d94:	200001a0 	.word	0x200001a0

08000d98 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <display+0x28>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <display+0x28>)
 8000da8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <display+0x28>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f805 	bl	8000dc4 <command>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001a5 	.word	0x200001a5

08000dc4 <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f813 	bl	8000dfe <send>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f805 	bl	8000dfe <send>
  return 1; // assume sucess
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	460a      	mov	r2, r1
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f832 	bl	8000e8e <write4bits>
  write4bits(Lbit|mode);
 8000e2a:	7bba      	ldrb	r2, [r7, #14]
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f82b 	bl	8000e8e <write4bits>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f023 0310 	bic.w	r3, r3, #16
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f82c 	bl	8000eb0 <writeI2c>
  HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fc53 	bl	8001704 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f822 	bl	8000eb0 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 fc49 	bl	8001704 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 0310 	bic.w	r3, r3, #16
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f818 	bl	8000eb0 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 fc3f 	bl	8001704 <HAL_Delay>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f808 	bl	8000eb0 <writeI2c>
  pulseEnable(value);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffcc 	bl	8000e40 <pulseEnable>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <writeI2c+0x38>)
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&I2cHandle, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <writeI2c+0x3c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	f107 020c 	add.w	r2, r7, #12
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <writeI2c+0x40>)
 8000eda:	f001 f991 	bl	8002200 <HAL_I2C_Master_Transmit>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001a4 	.word	0x200001a4
 8000eec:	200001a7 	.word	0x200001a7
 8000ef0:	2000014c 	.word	0x2000014c

08000ef4 <Lcd_Initialization>:

//////////////////////////////////////////////////////////////////////////


void Lcd_Initialization (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 8000ef8:	2042      	movs	r0, #66	; 0x42
 8000efa:	f7ff fe4f 	bl	8000b9c <FaBoLCD_PCF8574>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Lcd_Send_Cmd>:

void Lcd_Send_Cmd (char cmd)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
	command(cmd);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff58 	bl	8000dc4 <command>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Lcd_Send_Data>:

void Lcd_Send_Data (char data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	write(data);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff59 	bl	8000de0 <write>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <Lcd_Send_String>:



void Lcd_Send_String (char *str)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 8000f3e:	e006      	b.n	8000f4e <Lcd_Send_String+0x18>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffe7 	bl	8000f1c <Lcd_Send_Data>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f4      	bne.n	8000f40 <Lcd_Send_String+0xa>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Lcd_Clear_Display>:

void Lcd_Clear_Display (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd (0x01); //clear display
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff ffcc 	bl	8000f02 <Lcd_Send_Cmd>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <Lcd_Goto_XY>:

void Lcd_Goto_XY (int row, int col)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fed6 	bl	8000d34 <setCursor>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10a      	bne.n	8000fb8 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart3, data, 1, 200);
 8000fa2:	23c8      	movs	r3, #200	; 0xc8
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <HAL_UART_RxCpltCallback+0x34>)
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <HAL_UART_RxCpltCallback+0x38>)
 8000faa:	f002 fcc4 	bl	8003936 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, data, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <HAL_UART_RxCpltCallback+0x34>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_RxCpltCallback+0x38>)
 8000fb4:	f002 fd51 	bl	8003a5a <HAL_UART_Receive_IT>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	20000148 	.word	0x20000148
 8000fc8:	200000f8 	.word	0x200000f8

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fb36 	bl	8001640 <HAL_Init>

  /* USER CODE BEGIN Init */
  I2C_Init();
 8000fd4:	f7ff fdb2 	bl	8000b3c <I2C_Init>
  Lcd_Initialization();
 8000fd8:	f7ff ff8c 	bl	8000ef4 <Lcd_Initialization>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f824 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000fe0:	f000 f88c 	bl	80010fc <MX_TIM2_Init>
  MX_GPIO_Init();
 8000fe4:	f000 f900 	bl	80011e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe8:	f000 f85a 	bl	80010a0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000fec:	f000 f8d2 	bl	8001194 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_PIN, SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <main+0x4c>)
 8000ff6:	f000 ff8d 	bl	8001f14 <HAL_GPIO_WritePin>
  Output_Enable();
 8000ffa:	f7ff fc03 	bl	8000804 <Output_Enable>
  turnOffAllLED();
 8000ffe:	f7ff fc53 	bl	80008a8 <turnOffAllLED>
  HAL_UART_Receive_IT(&huart3, data, sizeof(data));
 8001002:	2201      	movs	r2, #1
 8001004:	4905      	ldr	r1, [pc, #20]	; (800101c <main+0x50>)
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <main+0x54>)
 8001008:	f002 fd27 	bl	8003a5a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <main+0x58>)
 800100e:	f002 f867 	bl	80030e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_communication();
 8001012:	f7ff f963 	bl	80002dc <fsm_communication>
 8001016:	e7fc      	b.n	8001012 <main+0x46>
 8001018:	40010c00 	.word	0x40010c00
 800101c:	20000148 	.word	0x20000148
 8001020:	200000f8 	.word	0x200000f8
 8001024:	20000200 	.word	0x20000200

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	2228      	movs	r2, #40	; 0x28
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f992 	bl	8004360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fbd4 	bl	800280c <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800106a:	f000 f95d 	bl	8001328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fe40 	bl	8002d0c <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001092:	f000 f949 	bl	8001328 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3740      	adds	r7, #64	; 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <MX_I2C1_Init+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010ac:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x58>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010de:	f000 ff4b 	bl	8001f78 <HAL_I2C_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e8:	f000 f91e 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001ac 	.word	0x200001ac
 80010f4:	40005400 	.word	0x40005400
 80010f8:	000186a0 	.word	0x000186a0

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 ff7d 	bl	8003040 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f8ec 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f002 f927 	bl	80033b0 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f8de 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f002 fb11 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f8d0 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000200 	.word	0x20000200

08001194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART3_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011cc:	f002 fb66 	bl	800389c <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f8a7 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000f8 	.word	0x200000f8
 80011e4:	40004800 	.word	0x40004800

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <MX_GPIO_Init+0xf0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a35      	ldr	r2, [pc, #212]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a2f      	ldr	r2, [pc, #188]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_Pin|LE_Pin|OE_Pin|SDI_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2178      	movs	r1, #120	; 0x78
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <MX_GPIO_Init+0xf4>)
 8001262:	f000 fe57 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <MX_GPIO_Init+0xf8>)
 800126c:	f000 fe52 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_active_low_GPIO_Port, OE_active_low_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2104      	movs	r1, #4
 8001274:	481b      	ldr	r0, [pc, #108]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001276:	f000 fe4d 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin LE_Pin OE_Pin SDI_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|LE_Pin|OE_Pin|SDI_Pin;
 800127a:	2378      	movs	r3, #120	; 0x78
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2302      	movs	r3, #2
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4619      	mov	r1, r3
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0xf4>)
 8001292:	f000 fcab 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001296:	2304      	movs	r3, #4
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0xf8>)
 80012ae:	f000 fc9d 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_active_low_Pin */
  GPIO_InitStruct.Pin = OE_active_low_Pin;
 80012b2:	2304      	movs	r3, #4
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2302      	movs	r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OE_active_low_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_GPIO_Init+0xfc>)
 80012ca:	f000 fc8f 	bl	8001bec <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	40011400 	.word	0x40011400

080012e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	if (string_flag == NORMAL)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d102      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		interruptServiceForDisplayLEDsSeries();
 80012f8:	f7ff fb24 	bl	8000944 <interruptServiceForDisplayLEDsSeries>
 80012fc:	e00c      	b.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x30>
	}
	else if (string_flag == ADJUST_GREEN)
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d102      	bne.n	800130c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		interruptServiceForDisplayGREENLEDsSeries();
 8001306:	f7ff fbb9 	bl	8000a7c <interruptServiceForDisplayGREENLEDsSeries>
 800130a:	e005      	b.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x30>
	}
	else if (string_flag == ADJUST_YELLOW)
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b06      	cmp	r3, #6
 8001312:	d101      	bne.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		interruptServiceForDisplayYELLOWLEDsSeries();
 8001314:	f7ff fbe2 	bl	8000adc <interruptServiceForDisplayYELLOWLEDsSeries>
	}
	interruptServiceForDisplaySingleLED();
 8001318:	f7fe ff84 	bl	8000224 <interruptServiceForDisplaySingleLED>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000cc 	.word	0x200000cc

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_I2C_MspInit+0x70>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d123      	bne.n	8001400 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	480b      	ldr	r0, [pc, #44]	; (8001410 <HAL_I2C_MspInit+0x78>)
 80013e4:	f000 fc02 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_I2C_MspInit+0x74>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40005400 	.word	0x40005400
 800140c:	40021000 	.word	0x40021000
 8001410:	40010c00 	.word	0x40010c00

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d113      	bne.n	800144e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201c      	movs	r0, #28
 8001444:	f000 fa59 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001448:	201c      	movs	r0, #28
 800144a:	f000 fa72 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d139      	bne.n	80014f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_UART_MspInit+0xa0>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_UART_MspInit+0xa0>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_UART_MspInit+0xa0>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_UART_MspInit+0xa0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_UART_MspInit+0xa0>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xa0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4619      	mov	r1, r3
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <HAL_UART_MspInit+0xa4>)
 80014c2:	f000 fb93 	bl	8001bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_UART_MspInit+0xa4>)
 80014dc:	f000 fb86 	bl	8001bec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2027      	movs	r0, #39	; 0x27
 80014e6:	f000 fa08 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ea:	2027      	movs	r0, #39	; 0x27
 80014ec:	f000 fa21 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010c00 	.word	0x40010c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f8bf 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM2_IRQHandler+0x10>)
 800155a:	f001 fe21 	bl	80031a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000200 	.word	0x20000200

08001568 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART3_IRQHandler+0x10>)
 800156e:	f002 faa5 	bl	8003abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000f8 	.word	0x200000f8

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f002 feae 	bl	800430c <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20010000 	.word	0x20010000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	200000ec 	.word	0x200000ec
 80015e4:	20000260 	.word	0x20000260

080015e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <Reset_Handler>:
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <LoopFillZerobss+0x12>)
 80015f6:	490d      	ldr	r1, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <LoopFillZerobss+0x1a>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:
 80015fe:	58d4      	ldr	r4, [r2, r3]
 8001600:	50c4      	str	r4, [r0, r3]
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:
 8001604:	18c4      	adds	r4, r0, r3
 8001606:	428c      	cmp	r4, r1
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <LoopFillZerobss+0x1e>)
 800160c:	4c0a      	ldr	r4, [pc, #40]	; (8001638 <LoopFillZerobss+0x22>)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:
 8001616:	42a2      	cmp	r2, r4
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
 800161a:	f7ff ffe5 	bl	80015e8 <SystemInit>
 800161e:	f002 fe7b 	bl	8004318 <__libc_init_array>
 8001622:	f7ff fcd3 	bl	8000fcc <main>
 8001626:	4770      	bx	lr
 8001628:	20000000 	.word	0x20000000
 800162c:	200000b0 	.word	0x200000b0
 8001630:	08004cd0 	.word	0x08004cd0
 8001634:	200000b0 	.word	0x200000b0
 8001638:	2000025c 	.word	0x2000025c

0800163c <ADC1_2_IRQHandler>:
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f947 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
 8001656:	200f      	movs	r0, #15
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>
 800165c:	f7ff fe6a 	bl	8001334 <HAL_MspInit>
 8001660:	2300      	movs	r3, #0
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f95f 	bl	800194e <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f927 	bl	80018fa <HAL_NVIC_SetPriority>
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000040 	.word	0x20000040
 80016c4:	20000048 	.word	0x20000048
 80016c8:	20000044 	.word	0x20000044

080016cc <HAL_IncTick>:
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x1c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x20>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_IncTick+0x20>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000048 	.word	0x20000048
 80016ec:	20000248 	.word	0x20000248

080016f0 <HAL_GetTick>:
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <HAL_GetTick+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	20000248 	.word	0x20000248

08001704 <HAL_Delay>:
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	f7ff fff0 	bl	80016f0 <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	bf00      	nop
 800172c:	f7ff ffe0 	bl	80016f0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000048 	.word	0x20000048

0800174c <__NVIC_SetPriorityGrouping>:
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <__NVIC_EnableIRQ+0x34>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
 8001894:	4313      	orrs	r3, r2
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <SysTick_Config>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff90 	bl	80017e8 <__NVIC_SetPriority>
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff2d 	bl	800174c <__NVIC_SetPriorityGrouping>
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	f7ff ff42 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff90 	bl	800183c <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <__NVIC_SetPriority>
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff35 	bl	80017b0 <__NVIC_EnableIRQ>
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_DMA_Abort>:
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001978:	2b02      	cmp	r3, #2
 800197a:	d008      	beq.n	800198e <HAL_DMA_Abort+0x28>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2204      	movs	r2, #4
 8001980:	639a      	str	r2, [r3, #56]	; 0x38
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
 800198a:	2301      	movs	r3, #1
 800198c:	e020      	b.n	80019d0 <HAL_DMA_Abort+0x6a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 020e 	bic.w	r2, r2, #14
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_DMA_Abort_IT>:
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d005      	beq.n	80019fe <HAL_DMA_Abort_IT+0x22>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2204      	movs	r2, #4
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e0d6      	b.n	8001bac <HAL_DMA_Abort_IT+0x1d0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 020e 	bic.w	r2, r2, #14
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d958      	bls.n	8001adc <HAL_DMA_Abort_IT+0x100>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_DMA_Abort_IT+0x1e0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04f      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xf8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_DMA_Abort_IT+0x1e4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d048      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xf4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_DMA_Abort_IT+0x1e8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d040      	beq.n	8001aca <HAL_DMA_Abort_IT+0xee>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5e      	ldr	r2, [pc, #376]	; (8001bc8 <HAL_DMA_Abort_IT+0x1ec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d038      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0xe8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a5d      	ldr	r2, [pc, #372]	; (8001bcc <HAL_DMA_Abort_IT+0x1f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d030      	beq.n	8001abe <HAL_DMA_Abort_IT+0xe2>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5b      	ldr	r2, [pc, #364]	; (8001bd0 <HAL_DMA_Abort_IT+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d028      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0xdc>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a53      	ldr	r2, [pc, #332]	; (8001bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d020      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0xd6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_DMA_Abort_IT+0x1f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_DMA_Abort_IT+0xd2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_DMA_Abort_IT+0x1fc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d012      	beq.n	8001aaa <HAL_DMA_Abort_IT+0xce>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <HAL_DMA_Abort_IT+0x200>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a53      	ldr	r2, [pc, #332]	; (8001be0 <HAL_DMA_Abort_IT+0x204>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d102      	bne.n	8001a9e <HAL_DMA_Abort_IT+0xc2>
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	e01b      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa2:	e018      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa8:	e015      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001aaa:	2310      	movs	r3, #16
 8001aac:	e013      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e011      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab6:	e00e      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001ab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001abc:	e00b      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac2:	e008      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	e005      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	e002      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	e000      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xfa>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_DMA_Abort_IT+0x208>)
 8001ad8:	6053      	str	r3, [r2, #4]
 8001ada:	e057      	b.n	8001b8c <HAL_DMA_Abort_IT+0x1b0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <HAL_DMA_Abort_IT+0x1e0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04f      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x1aa>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a35      	ldr	r2, [pc, #212]	; (8001bc0 <HAL_DMA_Abort_IT+0x1e4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d048      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x1a6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <HAL_DMA_Abort_IT+0x1e8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_DMA_Abort_IT+0x1a0>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_DMA_Abort_IT+0x1ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d038      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x19a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <HAL_DMA_Abort_IT+0x1f0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d030      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x194>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_DMA_Abort_IT+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d028      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x18e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d020      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x188>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <HAL_DMA_Abort_IT+0x1f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x184>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_DMA_Abort_IT+0x1fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x180>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <HAL_DMA_Abort_IT+0x200>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00a      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x17a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_DMA_Abort_IT+0x204>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <HAL_DMA_Abort_IT+0x174>
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	e01b      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b54:	e018      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5a:	e015      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	e013      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e011      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b6e:	e00b      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b74:	e008      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	e005      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b80:	e002      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b82:	2310      	movs	r3, #16
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_Abort_IT+0x1ac>
 8001b86:	2301      	movs	r3, #1
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_DMA_Abort_IT+0x20c>)
 8001b8a:	6053      	str	r3, [r2, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_Abort_IT+0x1d0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020080 	.word	0x40020080
 8001bbc:	40020008 	.word	0x40020008
 8001bc0:	4002001c 	.word	0x4002001c
 8001bc4:	40020030 	.word	0x40020030
 8001bc8:	40020044 	.word	0x40020044
 8001bcc:	40020058 	.word	0x40020058
 8001bd0:	4002006c 	.word	0x4002006c
 8001bd4:	40020408 	.word	0x40020408
 8001bd8:	4002041c 	.word	0x4002041c
 8001bdc:	40020430 	.word	0x40020430
 8001be0:	40020444 	.word	0x40020444
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_GPIO_Init>:
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	e179      	b.n	8001ef4 <HAL_GPIO_Init+0x308>
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8168 	bne.w	8001eee <HAL_GPIO_Init+0x302>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4aa0      	ldr	r2, [pc, #640]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a9e      	ldr	r2, [pc, #632]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a9e      	ldr	r2, [pc, #632]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a9c      	ldr	r2, [pc, #624]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a9c      	ldr	r2, [pc, #624]	; (8001eac <HAL_GPIO_Init+0x2c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a9a      	ldr	r2, [pc, #616]	; (8001eac <HAL_GPIO_Init+0x2c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a98      	ldr	r2, [pc, #608]	; (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a98      	ldr	r2, [pc, #608]	; (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a96      	ldr	r2, [pc, #600]	; (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a7f      	ldr	r2, [pc, #508]	; (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d1a:	bf00      	nop
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80c1 	beq.w	8001eee <HAL_GPIO_Init+0x302>
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <HAL_GPIO_Init+0x2d4>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a46      	ldr	r2, [pc, #280]	; (8001ec4 <HAL_GPIO_Init+0x2d8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d01f      	beq.n	8001df0 <HAL_GPIO_Init+0x204>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a45      	ldr	r2, [pc, #276]	; (8001ec8 <HAL_GPIO_Init+0x2dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d019      	beq.n	8001dec <HAL_GPIO_Init+0x200>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a44      	ldr	r2, [pc, #272]	; (8001ecc <HAL_GPIO_Init+0x2e0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1fc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <HAL_GPIO_Init+0x2e4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1f8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1f4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <HAL_GPIO_Init+0x2ec>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1f0>
 8001dd8:	2305      	movs	r3, #5
 8001dda:	e00a      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001ddc:	2306      	movs	r3, #6
 8001dde:	e008      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e006      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x206>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	492f      	ldr	r1, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x2d4>)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x23e>
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	492e      	ldr	r1, [pc, #184]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x24c>
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	492a      	ldr	r1, [pc, #168]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x266>
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4924      	ldr	r1, [pc, #144]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x274>
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4920      	ldr	r1, [pc, #128]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x28e>
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	491a      	ldr	r1, [pc, #104]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x29c>
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d025      	beq.n	8001ee0 <HAL_GPIO_Init+0x2f4>
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4910      	ldr	r1, [pc, #64]	; (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e025      	b.n	8001eee <HAL_GPIO_Init+0x302>
 8001ea2:	bf00      	nop
 8001ea4:	10320000 	.word	0x10320000
 8001ea8:	10310000 	.word	0x10310000
 8001eac:	10220000 	.word	0x10220000
 8001eb0:	10210000 	.word	0x10210000
 8001eb4:	10120000 	.word	0x10120000
 8001eb8:	10110000 	.word	0x10110000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40011400 	.word	0x40011400
 8001ed4:	40011800 	.word	0x40011800
 8001ed8:	40011c00 	.word	0x40011c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_GPIO_Init+0x324>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4909      	ldr	r1, [pc, #36]	; (8001f10 <HAL_GPIO_Init+0x324>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f47f ae7e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	372c      	adds	r7, #44	; 0x2c
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_WritePin>:
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_TogglePin>:
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43d9      	mvns	r1, r3
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	400b      	ands	r3, r1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_I2C_Init>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e12b      	b.n	80021e2 <HAL_I2C_Init+0x26a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff f9fa 	bl	8001398 <HAL_I2C_MspInit>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f000 ffea 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a81      	ldr	r2, [pc, #516]	; (80021ec <HAL_I2C_Init+0x274>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d807      	bhi.n	8001ffc <HAL_I2C_Init+0x84>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a80      	ldr	r2, [pc, #512]	; (80021f0 <HAL_I2C_Init+0x278>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e006      	b.n	800200a <HAL_I2C_Init+0x92>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a7d      	ldr	r2, [pc, #500]	; (80021f4 <HAL_I2C_Init+0x27c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Init+0x9a>
 800200e:	2301      	movs	r3, #1
 8002010:	e0e7      	b.n	80021e2 <HAL_I2C_Init+0x26a>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a78      	ldr	r2, [pc, #480]	; (80021f8 <HAL_I2C_Init+0x280>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <HAL_I2C_Init+0x274>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d802      	bhi.n	800204c <HAL_I2C_Init+0xd4>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3301      	adds	r3, #1
 800204a:	e009      	b.n	8002060 <HAL_I2C_Init+0xe8>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a69      	ldr	r2, [pc, #420]	; (80021fc <HAL_I2C_Init+0x284>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	495c      	ldr	r1, [pc, #368]	; (80021ec <HAL_I2C_Init+0x274>)
 800207c:	428b      	cmp	r3, r1
 800207e:	d819      	bhi.n	80020b4 <HAL_I2C_Init+0x13c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e59      	subs	r1, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fbb1 f3f3 	udiv	r3, r1, r3
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002094:	400b      	ands	r3, r1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_I2C_Init+0x138>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e59      	subs	r1, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	e051      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b0:	2304      	movs	r3, #4
 80020b2:	e04f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <HAL_I2C_Init+0x168>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e012      	b.n	8002106 <HAL_I2C_Init+0x18e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Init+0x196>
 800210a:	2301      	movs	r3, #1
 800210c:	e022      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10e      	bne.n	8002134 <HAL_I2C_Init+0x1bc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e58      	subs	r0, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	440b      	add	r3, r1
 8002124:	fbb0 f3f3 	udiv	r3, r0, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002132:	e00f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	0099      	lsls	r1, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	6809      	ldr	r1, [r1, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	61cb      	str	r3, [r1, #28]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6911      	ldr	r1, [r2, #16]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68d2      	ldr	r2, [r2, #12]
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e0:	2300      	movs	r3, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	000186a0 	.word	0x000186a0
 80021f0:	001e847f 	.word	0x001e847f
 80021f4:	003d08ff 	.word	0x003d08ff
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_I2C_Master_Transmit>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
 8002210:	4613      	mov	r3, r2
 8002212:	813b      	strh	r3, [r7, #8]
 8002214:	f7ff fa6c 	bl	80016f0 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b20      	cmp	r3, #32
 8002224:	f040 80e0 	bne.w	80023e8 <HAL_I2C_Master_Transmit+0x1e8>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2319      	movs	r3, #25
 800222e:	2201      	movs	r2, #1
 8002230:	4970      	ldr	r1, [pc, #448]	; (80023f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f964 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x42>
 800223e:	2302      	movs	r3, #2
 8002240:	e0d3      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x50>
 800224c:	2302      	movs	r3, #2
 800224e:	e0cc      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d007      	beq.n	8002276 <HAL_I2C_Master_Transmit+0x76>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2221      	movs	r2, #33	; 0x21
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2210      	movs	r2, #16
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f89c 	bl	80023fc <I2C_MasterRequestWrite>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0xce>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08d      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	e066      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f9de 	bl	80026ac <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x112>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Master_Transmit+0x10e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_I2C_Master_Transmit+0x188>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d017      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x188>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	6a39      	ldr	r1, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f9ce 	bl	800272e <I2C_WaitOnBTFFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x1b0>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	e01a      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d194      	bne.n	80022e6 <HAL_I2C_Master_Transmit+0xe6>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 80023e8:	2302      	movs	r3, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00100002 	.word	0x00100002
 80023f8:	ffff0000 	.word	0xffff0000

080023fc <I2C_MasterRequestWrite>:
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	460b      	mov	r3, r1
 800240a:	817b      	strh	r3, [r7, #10]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d006      	beq.n	8002426 <I2C_MasterRequestWrite+0x2a>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d003      	beq.n	8002426 <I2C_MasterRequestWrite+0x2a>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002424:	d108      	bne.n	8002438 <I2C_MasterRequestWrite+0x3c>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e00b      	b.n	8002450 <I2C_MasterRequestWrite+0x54>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	2b12      	cmp	r3, #18
 800243e:	d107      	bne.n	8002450 <I2C_MasterRequestWrite+0x54>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f84f 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <I2C_MasterRequestWrite+0x88>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002476:	d103      	bne.n	8002480 <I2C_MasterRequestWrite+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
 8002480:	2303      	movs	r3, #3
 8002482:	e035      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248c:	d108      	bne.n	80024a0 <I2C_MasterRequestWrite+0xa4>
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800249c:	611a      	str	r2, [r3, #16]
 800249e:	e01b      	b.n	80024d8 <I2C_MasterRequestWrite+0xdc>
 80024a0:	897b      	ldrh	r3, [r7, #10]
 80024a2:	11db      	asrs	r3, r3, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0306 	and.w	r3, r3, #6
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f063 030f 	orn	r3, r3, #15
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <I2C_MasterRequestWrite+0xfc>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f875 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestWrite+0xd2>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e010      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <I2C_MasterRequestWrite+0x100>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f865 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestWrite+0xf2>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
 80024ee:	2300      	movs	r3, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00010008 	.word	0x00010008
 80024fc:	00010002 	.word	0x00010002

08002500 <I2C_WaitOnFlagUntilTimeout>:
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	e025      	b.n	800255e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d021      	beq.n	800255e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800251a:	f7ff f8e9 	bl	80016f0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800255a:	2301      	movs	r3, #1
 800255c:	e023      	b.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10d      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	e00c      	b.n	800259e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d0b6      	beq.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x12>
 80025a4:	2300      	movs	r3, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	e051      	b.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	d123      	bne.n	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e6:	615a      	str	r2, [r3, #20]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002612:	2301      	movs	r3, #1
 8002614:	e046      	b.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d021      	beq.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800261e:	f7ff f867 	bl	80016f0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800265e:	2301      	movs	r3, #1
 8002660:	e020      	b.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e00b      	b.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d18d      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80026a2:	2300      	movs	r3, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_WaitOnTXEFlagUntilTimeout>:
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	e02d      	b.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f878 	bl	80027b0 <I2C_IsAcknowledgeFailed>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e02d      	b.n	8002726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d021      	beq.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80026d2:	f7ff f80d 	bl	80016f0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002712:	2301      	movs	r3, #1
 8002714:	e007      	b.n	8002726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d1ca      	bne.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8002724:	2300      	movs	r3, #0
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2C_WaitOnBTFFlagUntilTimeout>:
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	e02d      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f837 	bl	80027b0 <I2C_IsAcknowledgeFailed>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8002748:	2301      	movs	r3, #1
 800274a:	e02d      	b.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d021      	beq.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8002754:	f7fe ffcc 	bl	80016f0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	d302      	bcc.n	800276a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d1ca      	bne.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80027a6:	2300      	movs	r3, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_IsAcknowledgeFailed>:
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d11b      	bne.n	8002800 <I2C_IsAcknowledgeFailed+0x50>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <I2C_IsAcknowledgeFailed+0x52>
 8002800:	2300      	movs	r3, #0
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_RCC_OscConfig>:
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
 800281a:	2301      	movs	r3, #1
 800281c:	e26c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <HAL_RCC_OscConfig+0x12e>
 800282c:	4b92      	ldr	r3, [pc, #584]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b04      	cmp	r3, #4
 8002836:	d00c      	beq.n	8002852 <HAL_RCC_OscConfig+0x46>
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d112      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d10b      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
 8002852:	4b89      	ldr	r3, [pc, #548]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d06c      	beq.n	8002938 <HAL_RCC_OscConfig+0x12c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d168      	bne.n	8002938 <HAL_RCC_OscConfig+0x12c>
 8002866:	2301      	movs	r3, #1
 8002868:	e246      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x76>
 8002874:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a7f      	ldr	r2, [pc, #508]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a77      	ldr	r2, [pc, #476]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0xbc>
 80028ae:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a71      	ldr	r2, [pc, #452]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028c8:	4b6b      	ldr	r3, [pc, #428]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6a      	ldr	r2, [pc, #424]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a67      	ldr	r2, [pc, #412]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0x104>
 80028e8:	f7fe ff02 	bl	80016f0 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xf6>
 80028f0:	f7fe fefe 	bl	80016f0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xf6>
 80028fe:	2303      	movs	r3, #3
 8002900:	e1fa      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002902:	4b5d      	ldr	r3, [pc, #372]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xe4>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
 8002910:	f7fe feee 	bl	80016f0 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x11e>
 8002918:	f7fe feea 	bl	80016f0 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x11e>
 8002926:	2303      	movs	r3, #3
 8002928:	e1e6      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 800292a:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x10c>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
 8002938:	bf00      	nop
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_OscConfig+0x202>
 8002946:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x15e>
 8002952:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x18c>
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x176>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x176>
 800297e:	2301      	movs	r3, #1
 8002980:	e1ba      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002982:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4939      	ldr	r1, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1d6>
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f7fe fea3 	bl	80016f0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x1b4>
 80029ae:	f7fe fe9f 	bl	80016f0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x1b4>
 80029bc:	2303      	movs	r3, #3
 80029be:	e19b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x1a2>
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4927      	ldr	r1, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f7fe fe82 	bl	80016f0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1f6>
 80029f0:	f7fe fe7e 	bl	80016f0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1f6>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e17a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1e4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03a      	beq.n	8002a90 <HAL_RCC_OscConfig+0x284>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <HAL_RCC_OscConfig+0x24a>
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f7fe fe62 	bl	80016f0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x236>
 8002a30:	f7fe fe5e 	bl	80016f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x236>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e15a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x224>
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f000 fad8 	bl	8003004 <RCC_Delay>
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x284>
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f7fe fe48 	bl	80016f0 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_OscConfig+0x278>
 8002a64:	f7fe fe44 	bl	80016f0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d908      	bls.n	8002a84 <HAL_RCC_OscConfig+0x278>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e140      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	42420000 	.word	0x42420000
 8002a80:	42420480 	.word	0x42420480
 8002a84:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e9      	bne.n	8002a64 <HAL_RCC_OscConfig+0x258>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a6 	beq.w	8002bea <HAL_RCC_OscConfig+0x3de>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]
 8002aa2:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_RCC_OscConfig+0x2be>
 8002aae:	4b94      	ldr	r3, [pc, #592]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a93      	ldr	r2, [pc, #588]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	61d3      	str	r3, [r2, #28]
 8002aba:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
 8002aca:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
 8002ad6:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a8a      	ldr	r2, [pc, #552]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	f7fe fe05 	bl	80016f0 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002aea:	f7fe fe01 	bl	80016f0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0fd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002afc:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2de>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x312>
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a7a      	ldr	r2, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	e02d      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a72      	ldr	r2, [pc, #456]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x356>
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a6c      	ldr	r2, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a66      	ldr	r2, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a63      	ldr	r2, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_OscConfig+0x3a2>
 8002b82:	f7fe fdb5 	bl	80016f0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x394>
 8002b8a:	f7fe fdb1 	bl	80016f0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x394>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0ab      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCC_OscConfig+0x37e>
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
 8002bae:	f7fe fd9f 	bl	80016f0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
 8002bb6:	f7fe fd9b 	bl	80016f0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e095      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0x3de>
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8081 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x4ea>
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d061      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d146      	bne.n	8002c96 <HAL_RCC_OscConfig+0x48a>
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x4fc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f7fe fd6f 	bl	80016f0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x41c>
 8002c16:	f7fe fd6b 	bl	80016f0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x41c>
 8002c24:	2303      	movs	r3, #3
 8002c26:	e067      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x40a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	492d      	ldr	r1, [pc, #180]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a19      	ldr	r1, [r3, #32]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4927      	ldr	r1, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x4fc>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f7fe fd3f 	bl	80016f0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x47c>
 8002c76:	f7fe fd3b 	bl	80016f0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x47c>
 8002c84:	2303      	movs	r3, #3
 8002c86:	e037      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46a>
 8002c94:	e02f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4ea>
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x4fc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f7fe fd28 	bl	80016f0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
 8002ca4:	f7fe fd24 	bl	80016f0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e020      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x498>
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4ea>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4c4>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e013      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4e6>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x4ea>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4ec>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42420060 	.word	0x42420060

08002d0c <HAL_RCC_ClockConfig>:
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x44>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x44>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x92>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x68>
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d72:	6053      	str	r3, [r2, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x80>
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d8a:	6053      	str	r3, [r2, #4]
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x120>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xb6>
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xce>
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	f7fe fc78 	bl	80016f0 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
 8002e04:	f7fe fc74 	bl	80016f0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf8>
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x150>
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x150>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x16e>
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x18e>
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fbd6 	bl	800166c <HAL_InitTick>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08004c7c 	.word	0x08004c7c
 8002ed8:	20000040 	.word	0x20000040
 8002edc:	20000044 	.word	0x20000044

08002ee0 <HAL_RCC_GetSysClockFreq>:
 8002ee0:	b490      	push	{r4, r7}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ee8:	1d3c      	adds	r4, r7, #4
 8002eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ef0:	f240 2301 	movw	r3, #513	; 0x201
 8002ef4:	803b      	strh	r3, [r7, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x46>
 8002f1e:	e02d      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x9c>
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	e02d      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0xa2>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f32:	4413      	add	r3, r2
 8002f34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x8c>
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c5b      	lsrs	r3, r3, #17
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f52:	4413      	add	r3, r2
 8002f54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5e:	fb02 f203 	mul.w	r2, r2, r3
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	e004      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x96>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0xa2>
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	bf00      	nop
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3728      	adds	r7, #40	; 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc90      	pop	{r4, r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	08004c6c 	.word	0x08004c6c
 8002f94:	40021000 	.word	0x40021000
 8002f98:	007a1200 	.word	0x007a1200
 8002f9c:	003d0900 	.word	0x003d0900

08002fa0 <HAL_RCC_GetHCLKFreq>:
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	20000040 	.word	0x20000040

08002fb4 <HAL_RCC_GetPCLK1Freq>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	f7ff fff2 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08004c8c 	.word	0x08004c8c

08002fdc <HAL_RCC_GetPCLK2Freq>:
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	f7ff ffde 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	08004c8c 	.word	0x08004c8c

08003004 <RCC_Delay>:
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCC_Delay+0x34>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <RCC_Delay+0x38>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a5b      	lsrs	r3, r3, #9
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	bf00      	nop
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	60fa      	str	r2, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <RCC_Delay+0x1c>
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000040 	.word	0x20000040
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_TIM_Base_Init>:
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_Base_Init+0x12>
 800304e:	2301      	movs	r3, #1
 8003050:	e041      	b.n	80030d6 <HAL_TIM_Base_Init+0x96>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_Base_Init+0x2c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f9d4 	bl	8001414 <HAL_TIM_Base_MspInit>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 fa7e 	bl	8003580 <TIM_Base_SetConfig>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030d4:	2300      	movs	r3, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_TIM_Base_Start_IT>:
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x18>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e044      	b.n	8003182 <HAL_TIM_Base_Start_IT+0xa2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_TIM_Base_Start_IT+0xac>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_TIM_Base_Start_IT+0xb0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_Base_Start_IT+0xb4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_TIM_Base_Start_IT+0xb8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <HAL_TIM_Base_Start_IT+0xbc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0x90>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0xa0>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0xa0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	2300      	movs	r3, #0
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00

080031a0 <HAL_TIM_IRQHandler>:
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x5c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x5c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0202 	mvn.w	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	771a      	strb	r2, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x4a>
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9b1 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x56>
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9a4 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f9b3 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0xb0>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0204 	mvn.w	r2, #4
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	771a      	strb	r2, [r3, #28]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x9e>
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f987 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0xaa>
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f97a 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f989 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d122      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x104>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b08      	cmp	r3, #8
 800326a:	d11b      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x104>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0208 	mvn.w	r2, #8
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2204      	movs	r2, #4
 800327a:	771a      	strb	r2, [r3, #28]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0xf2>
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f95d 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xfe>
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f950 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f95f 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d122      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x158>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d11b      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x158>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0210 	mvn.w	r2, #16
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2208      	movs	r2, #8
 80032ce:	771a      	strb	r2, [r3, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x146>
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f933 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0x152>
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f926 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f935 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x184>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_TIM_IRQHandler+0x184>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0201 	mvn.w	r2, #1
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd ffe2 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_IRQHandler+0x1b0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d107      	bne.n	8003350 <HAL_TIM_IRQHandler+0x1b0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa9d 	bl	800388a <HAL_TIMEx_BreakCallback>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d10e      	bne.n	800337c <HAL_TIM_IRQHandler+0x1dc>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d107      	bne.n	800337c <HAL_TIM_IRQHandler+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8f9 	bl	800356e <HAL_TIM_TriggerCallback>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x208>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x208>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0220 	mvn.w	r2, #32
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa68 	bl	8003878 <HAL_TIMEx_CommutCallback>
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_ConfigClockSource>:
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e0b3      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x180>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd0>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x168>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	f000 8085 	beq.w	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xa2>
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x116>
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xf6>
 800342c:	2b50      	cmp	r3, #80	; 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x136>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x156>
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x156>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x156>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x156>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x168>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 f97e 	bl	8003762 <TIM_ETR_SetConfig>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	e04e      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f000 f967 	bl	8003762 <TIM_ETR_SetConfig>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e03b      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 f8de 	bl	8003674 <TIM_TI1_ConfigInputStage>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	; 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f935 	bl	800372e <TIM_ITRx_SetConfig>
 80034c4:	e02b      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 f8fc 	bl	80036d0 <TIM_TI2_ConfigInputStage>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	; 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f925 	bl	800372e <TIM_ITRx_SetConfig>
 80034e4:	e01b      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 f8be 	bl	8003674 <TIM_TI1_ConfigInputStage>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f915 	bl	800372e <TIM_ITRx_SetConfig>
 8003504:	e00b      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 f90c 	bl	800372e <TIM_ITRx_SetConfig>
 8003516:	e002      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_TIM_ConfigClockSource+0x16e>
 800351c:	bf00      	nop
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800352e:	2300      	movs	r3, #0
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_DelayElapsedCallback>:
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_IC_CaptureCallback>:
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_PWM_PulseFinishedCallback>:
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <HAL_TIM_TriggerCallback>:
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <TIM_Base_SetConfig>:
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a33      	ldr	r2, [pc, #204]	; (8003660 <TIM_Base_SetConfig+0xe0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a32      	ldr	r2, [pc, #200]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <TIM_Base_SetConfig+0xe8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a2e      	ldr	r2, [pc, #184]	; (800366c <TIM_Base_SetConfig+0xec>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <TIM_Base_SetConfig+0xf0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x52>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a22      	ldr	r2, [pc, #136]	; (8003660 <TIM_Base_SetConfig+0xe0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <TIM_Base_SetConfig+0x82>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00f      	beq.n	8003602 <TIM_Base_SetConfig+0x82>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d00b      	beq.n	8003602 <TIM_Base_SetConfig+0x82>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <TIM_Base_SetConfig+0xe8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <TIM_Base_SetConfig+0x82>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <TIM_Base_SetConfig+0xec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_Base_SetConfig+0x82>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <TIM_Base_SetConfig+0xf0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d108      	bne.n	8003614 <TIM_Base_SetConfig+0x94>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <TIM_Base_SetConfig+0xe0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0xc8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0xd0>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40013400 	.word	0x40013400
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00

08003674 <TIM_TI1_ConfigInputStage>:
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 030a 	bic.w	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <TIM_TI2_ConfigInputStage>:
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 0210 	bic.w	r2, r3, #16
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	031b      	lsls	r3, r3, #12
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	619a      	str	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	621a      	str	r2, [r3, #32]
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <TIM_ITRx_SetConfig>:
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	f043 0307 	orr.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <TIM_ETR_SetConfig>:
 8003762:	b480      	push	{r7}
 8003764:	b087      	sub	sp, #28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	021a      	lsls	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	431a      	orrs	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e050      	b.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d00e      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a12      	ldr	r2, [pc, #72]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10c      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4313      	orrs	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003858:	2300      	movs	r3, #0
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40013400 	.word	0x40013400
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00

08003878 <HAL_TIMEx_CommutCallback>:
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_TIMEx_BreakCallback>:
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_UART_Init>:
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e03f      	b.n	800392e <HAL_UART_Init+0x92>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x2c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fdca 	bl	800145c <HAL_UART_MspInit>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fc85 	bl	80041f0 <UART_SetConfig>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003904:	615a      	str	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	2300      	movs	r3, #0
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_UART_Transmit>:
 8003936:	b580      	push	{r7, lr}
 8003938:	b08a      	sub	sp, #40	; 0x28
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	d17c      	bne.n	8003a50 <HAL_UART_Transmit+0x11a>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x2c>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x30>
 8003962:	2301      	movs	r3, #1
 8003964:	e075      	b.n	8003a52 <HAL_UART_Transmit+0x11c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x3e>
 8003970:	2302      	movs	r3, #2
 8003972:	e06e      	b.n	8003a52 <HAL_UART_Transmit+0x11c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800398a:	f7fd feb1 	bl	80016f0 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	849a      	strh	r2, [r3, #36]	; 0x24
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	d108      	bne.n	80039b8 <HAL_UART_Transmit+0x82>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <HAL_UART_Transmit+0x82>
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e003      	b.n	80039c0 <HAL_UART_Transmit+0x8a>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039c8:	e02a      	b.n	8003a20 <HAL_UART_Transmit+0xea>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fa38 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_UART_Transmit+0xae>
 80039e0:	2303      	movs	r3, #3
 80039e2:	e036      	b.n	8003a52 <HAL_UART_Transmit+0x11c>
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_UART_Transmit+0xcc>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3302      	adds	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e007      	b.n	8003a12 <HAL_UART_Transmit+0xdc>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1cf      	bne.n	80039ca <HAL_UART_Transmit+0x94>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fa08 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_Transmit+0x10e>
 8003a40:	2303      	movs	r3, #3
 8003a42:	e006      	b.n	8003a52 <HAL_UART_Transmit+0x11c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_UART_Transmit+0x11c>
 8003a50:	2302      	movs	r3, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Receive_IT>:
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d11d      	bne.n	8003ab0 <HAL_UART_Receive_IT+0x56>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Receive_IT+0x26>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Receive_IT+0x2a>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e016      	b.n	8003ab2 <HAL_UART_Receive_IT+0x58>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Receive_IT+0x38>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e00f      	b.n	8003ab2 <HAL_UART_Receive_IT+0x58>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa19 	bl	8003ede <UART_Start_Receive_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	e000      	b.n	8003ab2 <HAL_UART_Receive_IT+0x58>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_UART_IRQHandler>:
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <HAL_UART_IRQHandler+0x52>
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_UART_IRQHandler+0x52>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_UART_IRQHandler+0x52>
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fac9 	bl	800409e <UART_Receive_IT>
 8003b0c:	e17b      	b.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80b1 	beq.w	8003c78 <HAL_UART_IRQHandler+0x1bc>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_UART_IRQHandler+0x70>
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a6 	beq.w	8003c78 <HAL_UART_IRQHandler+0x1bc>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_UART_IRQHandler+0x90>
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_UART_IRQHandler+0x90>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_UART_IRQHandler+0xb0>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_UART_IRQHandler+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_UART_IRQHandler+0xd0>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_IRQHandler+0xd0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0204 	orr.w	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00f      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xfa>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_UART_IRQHandler+0xee>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xfa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f043 0208 	orr.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 811e 	beq.w	8003dfc <HAL_UART_IRQHandler+0x340>
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_UART_IRQHandler+0x11e>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_UART_IRQHandler+0x11e>
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa62 	bl	800409e <UART_Receive_IT>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <HAL_UART_IRQHandler+0x146>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d031      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1aa>
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9a4 	bl	8003f50 <UART_EndRxTransfer>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d023      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1a2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c24:	615a      	str	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d013      	beq.n	8003c56 <HAL_UART_IRQHandler+0x19a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	4a76      	ldr	r2, [pc, #472]	; (8003e0c <HAL_UART_IRQHandler+0x350>)
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fece 	bl	80019dc <HAL_DMA_Abort_IT>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_UART_IRQHandler+0x1b8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c50:	4610      	mov	r0, r2
 8003c52:	4798      	blx	r3
 8003c54:	e00e      	b.n	8003c74 <HAL_UART_IRQHandler+0x1b8>
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8e3 	bl	8003e22 <HAL_UART_ErrorCallback>
 8003c5c:	e00a      	b.n	8003c74 <HAL_UART_IRQHandler+0x1b8>
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8df 	bl	8003e22 <HAL_UART_ErrorCallback>
 8003c64:	e006      	b.n	8003c74 <HAL_UART_IRQHandler+0x1b8>
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8db 	bl	8003e22 <HAL_UART_ErrorCallback>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
 8003c72:	e0c3      	b.n	8003dfc <HAL_UART_IRQHandler+0x340>
 8003c74:	bf00      	nop
 8003c76:	e0c1      	b.n	8003dfc <HAL_UART_IRQHandler+0x340>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 80a1 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x308>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 809b 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x308>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8095 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x308>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04e      	beq.n	8003d5c <HAL_UART_IRQHandler+0x2a0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	823b      	strh	r3, [r7, #16]
 8003cc8:	8a3b      	ldrh	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8098 	beq.w	8003e00 <HAL_UART_IRQHandler+0x344>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd4:	8a3a      	ldrh	r2, [r7, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f080 8092 	bcs.w	8003e00 <HAL_UART_IRQHandler+0x344>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8a3a      	ldrh	r2, [r7, #16]
 8003ce0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d02b      	beq.n	8003d44 <HAL_UART_IRQHandler+0x288>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	615a      	str	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fe11 	bl	8001966 <HAL_DMA_Abort>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f86d 	bl	8003e34 <HAL_UARTEx_RxEventCallback>
 8003d5a:	e051      	b.n	8003e00 <HAL_UART_IRQHandler+0x344>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	827b      	strh	r3, [r7, #18]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d047      	beq.n	8003e04 <HAL_UART_IRQHandler+0x348>
 8003d74:	8a7b      	ldrh	r3, [r7, #18]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d044      	beq.n	8003e04 <HAL_UART_IRQHandler+0x348>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0210 	bic.w	r2, r2, #16
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	8a7b      	ldrh	r3, [r7, #18]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f839 	bl	8003e34 <HAL_UARTEx_RxEventCallback>
 8003dc2:	e01f      	b.n	8003e04 <HAL_UART_IRQHandler+0x348>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_UART_IRQHandler+0x324>
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_UART_IRQHandler+0x324>
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8f9 	bl	8003fd0 <UART_Transmit_IT>
 8003dde:	e012      	b.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f93a 	bl	800406e <UART_EndTransmit_IT>
 8003dfa:	e004      	b.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_UART_IRQHandler+0x34a>
 8003e04:	bf00      	nop
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	08003fa9 	.word	0x08003fa9

08003e10 <HAL_UART_TxCpltCallback>:
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_UART_ErrorCallback>:
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_UARTEx_RxEventCallback>:
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <UART_WaitOnFlagUntilTimeout>:
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
 8003e5a:	e02c      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d028      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	f7fd fc41 	bl	80016f0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d21d      	bcs.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	615a      	str	r2, [r3, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0c3      	beq.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x12>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_Start_Receive_IT>:
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2222      	movs	r2, #34	; 0x22
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	2300      	movs	r3, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <UART_EndRxTransfer>:
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d107      	bne.n	8003f90 <UART_EndRxTransfer+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0210 	bic.w	r2, r2, #16
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <UART_DMAAbortOnError>:
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	84da      	strh	r2, [r3, #38]	; 0x26
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff ff2d 	bl	8003e22 <HAL_UART_ErrorCallback>
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_Transmit_IT>:
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b21      	cmp	r3, #33	; 0x21
 8003fe2:	d13e      	bne.n	8004062 <UART_Transmit_IT+0x92>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d114      	bne.n	8004018 <UART_Transmit_IT+0x48>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d110      	bne.n	8004018 <UART_Transmit_IT+0x48>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]
 8004016:	e008      	b.n	800402a <UART_Transmit_IT+0x5a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6211      	str	r1, [r2, #32]
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	84d1      	strh	r1, [r2, #38]	; 0x26
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <UART_Transmit_IT+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <UART_Transmit_IT+0x94>
 8004062:	2302      	movs	r3, #2
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <UART_EndTransmit_IT>:
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff febe 	bl	8003e10 <HAL_UART_TxCpltCallback>
 8004094:	2300      	movs	r3, #0
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_Receive_IT>:
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b22      	cmp	r3, #34	; 0x22
 80040b0:	f040 8099 	bne.w	80041e6 <UART_Receive_IT+0x148>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d117      	bne.n	80040ee <UART_Receive_IT+0x50>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <UART_Receive_IT+0x50>
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	b29a      	uxth	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
 80040ec:	e026      	b.n	800413c <UART_Receive_IT+0x9e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d007      	beq.n	8004112 <UART_Receive_IT+0x74>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <UART_Receive_IT+0x82>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <UART_Receive_IT+0x82>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e008      	b.n	8004132 <UART_Receive_IT+0x94>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412c:	b2da      	uxtb	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4619      	mov	r1, r3
 800414a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800414c:	2b00      	cmp	r3, #0
 800414e:	d148      	bne.n	80041e2 <UART_Receive_IT+0x144>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0220 	bic.w	r2, r2, #32
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	615a      	str	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	d123      	bne.n	80041d8 <UART_Receive_IT+0x13a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0210 	bic.w	r2, r2, #16
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d10a      	bne.n	80041ca <UART_Receive_IT+0x12c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fe2f 	bl	8003e34 <HAL_UARTEx_RxEventCallback>
 80041d6:	e002      	b.n	80041de <UART_Receive_IT+0x140>
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fc fed9 	bl	8000f90 <HAL_UART_RxCpltCallback>
 80041de:	2300      	movs	r3, #0
 80041e0:	e002      	b.n	80041e8 <UART_Receive_IT+0x14a>
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <UART_Receive_IT+0x14a>
 80041e6:	2302      	movs	r3, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_SetConfig>:
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800422a:	f023 030c 	bic.w	r3, r3, #12
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	430b      	orrs	r3, r1
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	615a      	str	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <UART_SetConfig+0x114>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <UART_SetConfig+0x70>
 8004258:	f7fe fec0 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	e002      	b.n	8004266 <UART_SetConfig+0x76>
 8004260:	f7fe fea8 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009a      	lsls	r2, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <UART_SetConfig+0x118>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	0119      	lsls	r1, r3, #4
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f2f3 	udiv	r2, r2, r3
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <UART_SetConfig+0x118>)
 800429e:	fba3 0302 	umull	r0, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2064      	movs	r0, #100	; 0x64
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	; 0x32
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <UART_SetConfig+0x118>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042bc:	4419      	add	r1, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <UART_SetConfig+0x118>)
 80042d6:	fba3 0302 	umull	r0, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2064      	movs	r0, #100	; 0x64
 80042de:	fb00 f303 	mul.w	r3, r0, r3
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	3332      	adds	r3, #50	; 0x32
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <UART_SetConfig+0x118>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 020f 	and.w	r2, r3, #15
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	440a      	add	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40013800 	.word	0x40013800
 8004308:	51eb851f 	.word	0x51eb851f

0800430c <__errno>:
 800430c:	4b01      	ldr	r3, [pc, #4]	; (8004314 <__errno+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000004c 	.word	0x2000004c

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	2600      	movs	r6, #0
 800431c:	4d0c      	ldr	r5, [pc, #48]	; (8004350 <__libc_init_array+0x38>)
 800431e:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	f000 fc5c 	bl	8004be4 <_init>
 800432c:	2600      	movs	r6, #0
 800432e:	4d0a      	ldr	r5, [pc, #40]	; (8004358 <__libc_init_array+0x40>)
 8004330:	4c0a      	ldr	r4, [pc, #40]	; (800435c <__libc_init_array+0x44>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	08004cc8 	.word	0x08004cc8
 8004354:	08004cc8 	.word	0x08004cc8
 8004358:	08004cc8 	.word	0x08004cc8
 800435c:	08004ccc 	.word	0x08004ccc

08004360 <memset>:
 8004360:	4603      	mov	r3, r0
 8004362:	4402      	add	r2, r0
 8004364:	4293      	cmp	r3, r2
 8004366:	d100      	bne.n	800436a <memset+0xa>
 8004368:	4770      	bx	lr
 800436a:	f803 1b01 	strb.w	r1, [r3], #1
 800436e:	e7f9      	b.n	8004364 <memset+0x4>

08004370 <siprintf>:
 8004370:	b40e      	push	{r1, r2, r3}
 8004372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004376:	b500      	push	{lr}
 8004378:	b09c      	sub	sp, #112	; 0x70
 800437a:	ab1d      	add	r3, sp, #116	; 0x74
 800437c:	9002      	str	r0, [sp, #8]
 800437e:	9006      	str	r0, [sp, #24]
 8004380:	9107      	str	r1, [sp, #28]
 8004382:	9104      	str	r1, [sp, #16]
 8004384:	4808      	ldr	r0, [pc, #32]	; (80043a8 <siprintf+0x38>)
 8004386:	4909      	ldr	r1, [pc, #36]	; (80043ac <siprintf+0x3c>)
 8004388:	f853 2b04 	ldr.w	r2, [r3], #4
 800438c:	9105      	str	r1, [sp, #20]
 800438e:	6800      	ldr	r0, [r0, #0]
 8004390:	a902      	add	r1, sp, #8
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	f000 f868 	bl	8004468 <_svfiprintf_r>
 8004398:	2200      	movs	r2, #0
 800439a:	9b02      	ldr	r3, [sp, #8]
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	b01c      	add	sp, #112	; 0x70
 80043a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a4:	b003      	add	sp, #12
 80043a6:	4770      	bx	lr
 80043a8:	2000004c 	.word	0x2000004c
 80043ac:	ffff0208 	.word	0xffff0208

080043b0 <__ssputs_r>:
 80043b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	688e      	ldr	r6, [r1, #8]
 80043b6:	4682      	mov	sl, r0
 80043b8:	429e      	cmp	r6, r3
 80043ba:	460c      	mov	r4, r1
 80043bc:	4690      	mov	r8, r2
 80043be:	461f      	mov	r7, r3
 80043c0:	d838      	bhi.n	8004434 <__ssputs_r+0x84>
 80043c2:	898a      	ldrh	r2, [r1, #12]
 80043c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043c8:	d032      	beq.n	8004430 <__ssputs_r+0x80>
 80043ca:	6825      	ldr	r5, [r4, #0]
 80043cc:	6909      	ldr	r1, [r1, #16]
 80043ce:	3301      	adds	r3, #1
 80043d0:	eba5 0901 	sub.w	r9, r5, r1
 80043d4:	6965      	ldr	r5, [r4, #20]
 80043d6:	444b      	add	r3, r9
 80043d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043e0:	106d      	asrs	r5, r5, #1
 80043e2:	429d      	cmp	r5, r3
 80043e4:	bf38      	it	cc
 80043e6:	461d      	movcc	r5, r3
 80043e8:	0553      	lsls	r3, r2, #21
 80043ea:	d531      	bpl.n	8004450 <__ssputs_r+0xa0>
 80043ec:	4629      	mov	r1, r5
 80043ee:	f000 fb53 	bl	8004a98 <_malloc_r>
 80043f2:	4606      	mov	r6, r0
 80043f4:	b950      	cbnz	r0, 800440c <__ssputs_r+0x5c>
 80043f6:	230c      	movs	r3, #12
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f8ca 3000 	str.w	r3, [sl]
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440c:	464a      	mov	r2, r9
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	f000 face 	bl	80049b0 <memcpy>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800441a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	6126      	str	r6, [r4, #16]
 8004422:	444e      	add	r6, r9
 8004424:	6026      	str	r6, [r4, #0]
 8004426:	463e      	mov	r6, r7
 8004428:	6165      	str	r5, [r4, #20]
 800442a:	eba5 0509 	sub.w	r5, r5, r9
 800442e:	60a5      	str	r5, [r4, #8]
 8004430:	42be      	cmp	r6, r7
 8004432:	d900      	bls.n	8004436 <__ssputs_r+0x86>
 8004434:	463e      	mov	r6, r7
 8004436:	4632      	mov	r2, r6
 8004438:	4641      	mov	r1, r8
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	f000 fac6 	bl	80049cc <memmove>
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	1b9b      	subs	r3, r3, r6
 8004446:	4432      	add	r2, r6
 8004448:	2000      	movs	r0, #0
 800444a:	60a3      	str	r3, [r4, #8]
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	e7db      	b.n	8004408 <__ssputs_r+0x58>
 8004450:	462a      	mov	r2, r5
 8004452:	f000 fb7b 	bl	8004b4c <_realloc_r>
 8004456:	4606      	mov	r6, r0
 8004458:	2800      	cmp	r0, #0
 800445a:	d1e1      	bne.n	8004420 <__ssputs_r+0x70>
 800445c:	4650      	mov	r0, sl
 800445e:	6921      	ldr	r1, [r4, #16]
 8004460:	f000 face 	bl	8004a00 <_free_r>
 8004464:	e7c7      	b.n	80043f6 <__ssputs_r+0x46>
	...

08004468 <_svfiprintf_r>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	4698      	mov	r8, r3
 800446e:	898b      	ldrh	r3, [r1, #12]
 8004470:	4607      	mov	r7, r0
 8004472:	061b      	lsls	r3, r3, #24
 8004474:	460d      	mov	r5, r1
 8004476:	4614      	mov	r4, r2
 8004478:	b09d      	sub	sp, #116	; 0x74
 800447a:	d50e      	bpl.n	800449a <_svfiprintf_r+0x32>
 800447c:	690b      	ldr	r3, [r1, #16]
 800447e:	b963      	cbnz	r3, 800449a <_svfiprintf_r+0x32>
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	f000 fb09 	bl	8004a98 <_malloc_r>
 8004486:	6028      	str	r0, [r5, #0]
 8004488:	6128      	str	r0, [r5, #16]
 800448a:	b920      	cbnz	r0, 8004496 <_svfiprintf_r+0x2e>
 800448c:	230c      	movs	r3, #12
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	e0d1      	b.n	800463a <_svfiprintf_r+0x1d2>
 8004496:	2340      	movs	r3, #64	; 0x40
 8004498:	616b      	str	r3, [r5, #20]
 800449a:	2300      	movs	r3, #0
 800449c:	9309      	str	r3, [sp, #36]	; 0x24
 800449e:	2320      	movs	r3, #32
 80044a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a4:	2330      	movs	r3, #48	; 0x30
 80044a6:	f04f 0901 	mov.w	r9, #1
 80044aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004654 <_svfiprintf_r+0x1ec>
 80044b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044b6:	4623      	mov	r3, r4
 80044b8:	469a      	mov	sl, r3
 80044ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044be:	b10a      	cbz	r2, 80044c4 <_svfiprintf_r+0x5c>
 80044c0:	2a25      	cmp	r2, #37	; 0x25
 80044c2:	d1f9      	bne.n	80044b8 <_svfiprintf_r+0x50>
 80044c4:	ebba 0b04 	subs.w	fp, sl, r4
 80044c8:	d00b      	beq.n	80044e2 <_svfiprintf_r+0x7a>
 80044ca:	465b      	mov	r3, fp
 80044cc:	4622      	mov	r2, r4
 80044ce:	4629      	mov	r1, r5
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7ff ff6d 	bl	80043b0 <__ssputs_r>
 80044d6:	3001      	adds	r0, #1
 80044d8:	f000 80aa 	beq.w	8004630 <_svfiprintf_r+0x1c8>
 80044dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044de:	445a      	add	r2, fp
 80044e0:	9209      	str	r2, [sp, #36]	; 0x24
 80044e2:	f89a 3000 	ldrb.w	r3, [sl]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80a2 	beq.w	8004630 <_svfiprintf_r+0x1c8>
 80044ec:	2300      	movs	r3, #0
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044f6:	f10a 0a01 	add.w	sl, sl, #1
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	9307      	str	r3, [sp, #28]
 80044fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004502:	931a      	str	r3, [sp, #104]	; 0x68
 8004504:	4654      	mov	r4, sl
 8004506:	2205      	movs	r2, #5
 8004508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450c:	4851      	ldr	r0, [pc, #324]	; (8004654 <_svfiprintf_r+0x1ec>)
 800450e:	f000 fa41 	bl	8004994 <memchr>
 8004512:	9a04      	ldr	r2, [sp, #16]
 8004514:	b9d8      	cbnz	r0, 800454e <_svfiprintf_r+0xe6>
 8004516:	06d0      	lsls	r0, r2, #27
 8004518:	bf44      	itt	mi
 800451a:	2320      	movmi	r3, #32
 800451c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004520:	0711      	lsls	r1, r2, #28
 8004522:	bf44      	itt	mi
 8004524:	232b      	movmi	r3, #43	; 0x2b
 8004526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800452a:	f89a 3000 	ldrb.w	r3, [sl]
 800452e:	2b2a      	cmp	r3, #42	; 0x2a
 8004530:	d015      	beq.n	800455e <_svfiprintf_r+0xf6>
 8004532:	4654      	mov	r4, sl
 8004534:	2000      	movs	r0, #0
 8004536:	f04f 0c0a 	mov.w	ip, #10
 800453a:	9a07      	ldr	r2, [sp, #28]
 800453c:	4621      	mov	r1, r4
 800453e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004542:	3b30      	subs	r3, #48	; 0x30
 8004544:	2b09      	cmp	r3, #9
 8004546:	d94e      	bls.n	80045e6 <_svfiprintf_r+0x17e>
 8004548:	b1b0      	cbz	r0, 8004578 <_svfiprintf_r+0x110>
 800454a:	9207      	str	r2, [sp, #28]
 800454c:	e014      	b.n	8004578 <_svfiprintf_r+0x110>
 800454e:	eba0 0308 	sub.w	r3, r0, r8
 8004552:	fa09 f303 	lsl.w	r3, r9, r3
 8004556:	4313      	orrs	r3, r2
 8004558:	46a2      	mov	sl, r4
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	e7d2      	b.n	8004504 <_svfiprintf_r+0x9c>
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	1d19      	adds	r1, r3, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	9103      	str	r1, [sp, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfbb      	ittet	lt
 800456a:	425b      	neglt	r3, r3
 800456c:	f042 0202 	orrlt.w	r2, r2, #2
 8004570:	9307      	strge	r3, [sp, #28]
 8004572:	9307      	strlt	r3, [sp, #28]
 8004574:	bfb8      	it	lt
 8004576:	9204      	strlt	r2, [sp, #16]
 8004578:	7823      	ldrb	r3, [r4, #0]
 800457a:	2b2e      	cmp	r3, #46	; 0x2e
 800457c:	d10c      	bne.n	8004598 <_svfiprintf_r+0x130>
 800457e:	7863      	ldrb	r3, [r4, #1]
 8004580:	2b2a      	cmp	r3, #42	; 0x2a
 8004582:	d135      	bne.n	80045f0 <_svfiprintf_r+0x188>
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	3402      	adds	r4, #2
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	9203      	str	r2, [sp, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfb8      	it	lt
 8004592:	f04f 33ff 	movlt.w	r3, #4294967295
 8004596:	9305      	str	r3, [sp, #20]
 8004598:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004664 <_svfiprintf_r+0x1fc>
 800459c:	2203      	movs	r2, #3
 800459e:	4650      	mov	r0, sl
 80045a0:	7821      	ldrb	r1, [r4, #0]
 80045a2:	f000 f9f7 	bl	8004994 <memchr>
 80045a6:	b140      	cbz	r0, 80045ba <_svfiprintf_r+0x152>
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	eba0 000a 	sub.w	r0, r0, sl
 80045ae:	fa03 f000 	lsl.w	r0, r3, r0
 80045b2:	9b04      	ldr	r3, [sp, #16]
 80045b4:	3401      	adds	r4, #1
 80045b6:	4303      	orrs	r3, r0
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045be:	2206      	movs	r2, #6
 80045c0:	4825      	ldr	r0, [pc, #148]	; (8004658 <_svfiprintf_r+0x1f0>)
 80045c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045c6:	f000 f9e5 	bl	8004994 <memchr>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d038      	beq.n	8004640 <_svfiprintf_r+0x1d8>
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <_svfiprintf_r+0x1f4>)
 80045d0:	bb1b      	cbnz	r3, 800461a <_svfiprintf_r+0x1b2>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	3307      	adds	r3, #7
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	3308      	adds	r3, #8
 80045dc:	9303      	str	r3, [sp, #12]
 80045de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e0:	4433      	add	r3, r6
 80045e2:	9309      	str	r3, [sp, #36]	; 0x24
 80045e4:	e767      	b.n	80044b6 <_svfiprintf_r+0x4e>
 80045e6:	460c      	mov	r4, r1
 80045e8:	2001      	movs	r0, #1
 80045ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ee:	e7a5      	b.n	800453c <_svfiprintf_r+0xd4>
 80045f0:	2300      	movs	r3, #0
 80045f2:	f04f 0c0a 	mov.w	ip, #10
 80045f6:	4619      	mov	r1, r3
 80045f8:	3401      	adds	r4, #1
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	4620      	mov	r0, r4
 80045fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004602:	3a30      	subs	r2, #48	; 0x30
 8004604:	2a09      	cmp	r2, #9
 8004606:	d903      	bls.n	8004610 <_svfiprintf_r+0x1a8>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0c5      	beq.n	8004598 <_svfiprintf_r+0x130>
 800460c:	9105      	str	r1, [sp, #20]
 800460e:	e7c3      	b.n	8004598 <_svfiprintf_r+0x130>
 8004610:	4604      	mov	r4, r0
 8004612:	2301      	movs	r3, #1
 8004614:	fb0c 2101 	mla	r1, ip, r1, r2
 8004618:	e7f0      	b.n	80045fc <_svfiprintf_r+0x194>
 800461a:	ab03      	add	r3, sp, #12
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	462a      	mov	r2, r5
 8004620:	4638      	mov	r0, r7
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <_svfiprintf_r+0x1f8>)
 8004624:	a904      	add	r1, sp, #16
 8004626:	f3af 8000 	nop.w
 800462a:	1c42      	adds	r2, r0, #1
 800462c:	4606      	mov	r6, r0
 800462e:	d1d6      	bne.n	80045de <_svfiprintf_r+0x176>
 8004630:	89ab      	ldrh	r3, [r5, #12]
 8004632:	065b      	lsls	r3, r3, #25
 8004634:	f53f af2c 	bmi.w	8004490 <_svfiprintf_r+0x28>
 8004638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800463a:	b01d      	add	sp, #116	; 0x74
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	ab03      	add	r3, sp, #12
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	462a      	mov	r2, r5
 8004646:	4638      	mov	r0, r7
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <_svfiprintf_r+0x1f8>)
 800464a:	a904      	add	r1, sp, #16
 800464c:	f000 f87c 	bl	8004748 <_printf_i>
 8004650:	e7eb      	b.n	800462a <_svfiprintf_r+0x1c2>
 8004652:	bf00      	nop
 8004654:	08004c94 	.word	0x08004c94
 8004658:	08004c9e 	.word	0x08004c9e
 800465c:	00000000 	.word	0x00000000
 8004660:	080043b1 	.word	0x080043b1
 8004664:	08004c9a 	.word	0x08004c9a

08004668 <_printf_common>:
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	4616      	mov	r6, r2
 800466e:	4699      	mov	r9, r3
 8004670:	688a      	ldr	r2, [r1, #8]
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	4607      	mov	r7, r0
 8004676:	4293      	cmp	r3, r2
 8004678:	bfb8      	it	lt
 800467a:	4613      	movlt	r3, r2
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004682:	460c      	mov	r4, r1
 8004684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004688:	b10a      	cbz	r2, 800468e <_printf_common+0x26>
 800468a:	3301      	adds	r3, #1
 800468c:	6033      	str	r3, [r6, #0]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	0699      	lsls	r1, r3, #26
 8004692:	bf42      	ittt	mi
 8004694:	6833      	ldrmi	r3, [r6, #0]
 8004696:	3302      	addmi	r3, #2
 8004698:	6033      	strmi	r3, [r6, #0]
 800469a:	6825      	ldr	r5, [r4, #0]
 800469c:	f015 0506 	ands.w	r5, r5, #6
 80046a0:	d106      	bne.n	80046b0 <_printf_common+0x48>
 80046a2:	f104 0a19 	add.w	sl, r4, #25
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	6832      	ldr	r2, [r6, #0]
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	42ab      	cmp	r3, r5
 80046ae:	dc28      	bgt.n	8004702 <_printf_common+0x9a>
 80046b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046b4:	1e13      	subs	r3, r2, #0
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	bf18      	it	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	0692      	lsls	r2, r2, #26
 80046be:	d42d      	bmi.n	800471c <_printf_common+0xb4>
 80046c0:	4649      	mov	r1, r9
 80046c2:	4638      	mov	r0, r7
 80046c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c8:	47c0      	blx	r8
 80046ca:	3001      	adds	r0, #1
 80046cc:	d020      	beq.n	8004710 <_printf_common+0xa8>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	68e5      	ldr	r5, [r4, #12]
 80046d2:	f003 0306 	and.w	r3, r3, #6
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf18      	it	ne
 80046da:	2500      	movne	r5, #0
 80046dc:	6832      	ldr	r2, [r6, #0]
 80046de:	f04f 0600 	mov.w	r6, #0
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	bf08      	it	eq
 80046e6:	1aad      	subeq	r5, r5, r2
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	bf08      	it	eq
 80046ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bfc4      	itt	gt
 80046f4:	1a9b      	subgt	r3, r3, r2
 80046f6:	18ed      	addgt	r5, r5, r3
 80046f8:	341a      	adds	r4, #26
 80046fa:	42b5      	cmp	r5, r6
 80046fc:	d11a      	bne.n	8004734 <_printf_common+0xcc>
 80046fe:	2000      	movs	r0, #0
 8004700:	e008      	b.n	8004714 <_printf_common+0xac>
 8004702:	2301      	movs	r3, #1
 8004704:	4652      	mov	r2, sl
 8004706:	4649      	mov	r1, r9
 8004708:	4638      	mov	r0, r7
 800470a:	47c0      	blx	r8
 800470c:	3001      	adds	r0, #1
 800470e:	d103      	bne.n	8004718 <_printf_common+0xb0>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004718:	3501      	adds	r5, #1
 800471a:	e7c4      	b.n	80046a6 <_printf_common+0x3e>
 800471c:	2030      	movs	r0, #48	; 0x30
 800471e:	18e1      	adds	r1, r4, r3
 8004720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800472a:	4422      	add	r2, r4
 800472c:	3302      	adds	r3, #2
 800472e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004732:	e7c5      	b.n	80046c0 <_printf_common+0x58>
 8004734:	2301      	movs	r3, #1
 8004736:	4622      	mov	r2, r4
 8004738:	4649      	mov	r1, r9
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d0e6      	beq.n	8004710 <_printf_common+0xa8>
 8004742:	3601      	adds	r6, #1
 8004744:	e7d9      	b.n	80046fa <_printf_common+0x92>
	...

08004748 <_printf_i>:
 8004748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	460c      	mov	r4, r1
 800474e:	7e27      	ldrb	r7, [r4, #24]
 8004750:	4691      	mov	r9, r2
 8004752:	2f78      	cmp	r7, #120	; 0x78
 8004754:	4680      	mov	r8, r0
 8004756:	469a      	mov	sl, r3
 8004758:	990c      	ldr	r1, [sp, #48]	; 0x30
 800475a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800475e:	d807      	bhi.n	8004770 <_printf_i+0x28>
 8004760:	2f62      	cmp	r7, #98	; 0x62
 8004762:	d80a      	bhi.n	800477a <_printf_i+0x32>
 8004764:	2f00      	cmp	r7, #0
 8004766:	f000 80d9 	beq.w	800491c <_printf_i+0x1d4>
 800476a:	2f58      	cmp	r7, #88	; 0x58
 800476c:	f000 80a4 	beq.w	80048b8 <_printf_i+0x170>
 8004770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004778:	e03a      	b.n	80047f0 <_printf_i+0xa8>
 800477a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800477e:	2b15      	cmp	r3, #21
 8004780:	d8f6      	bhi.n	8004770 <_printf_i+0x28>
 8004782:	a001      	add	r0, pc, #4	; (adr r0, 8004788 <_printf_i+0x40>)
 8004784:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004788:	080047e1 	.word	0x080047e1
 800478c:	080047f5 	.word	0x080047f5
 8004790:	08004771 	.word	0x08004771
 8004794:	08004771 	.word	0x08004771
 8004798:	08004771 	.word	0x08004771
 800479c:	08004771 	.word	0x08004771
 80047a0:	080047f5 	.word	0x080047f5
 80047a4:	08004771 	.word	0x08004771
 80047a8:	08004771 	.word	0x08004771
 80047ac:	08004771 	.word	0x08004771
 80047b0:	08004771 	.word	0x08004771
 80047b4:	08004903 	.word	0x08004903
 80047b8:	08004825 	.word	0x08004825
 80047bc:	080048e5 	.word	0x080048e5
 80047c0:	08004771 	.word	0x08004771
 80047c4:	08004771 	.word	0x08004771
 80047c8:	08004925 	.word	0x08004925
 80047cc:	08004771 	.word	0x08004771
 80047d0:	08004825 	.word	0x08004825
 80047d4:	08004771 	.word	0x08004771
 80047d8:	08004771 	.word	0x08004771
 80047dc:	080048ed 	.word	0x080048ed
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	600a      	str	r2, [r1, #0]
 80047ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0a4      	b.n	800493e <_printf_i+0x1f6>
 80047f4:	6825      	ldr	r5, [r4, #0]
 80047f6:	6808      	ldr	r0, [r1, #0]
 80047f8:	062e      	lsls	r6, r5, #24
 80047fa:	f100 0304 	add.w	r3, r0, #4
 80047fe:	d50a      	bpl.n	8004816 <_printf_i+0xce>
 8004800:	6805      	ldr	r5, [r0, #0]
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	2d00      	cmp	r5, #0
 8004806:	da03      	bge.n	8004810 <_printf_i+0xc8>
 8004808:	232d      	movs	r3, #45	; 0x2d
 800480a:	426d      	negs	r5, r5
 800480c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004810:	230a      	movs	r3, #10
 8004812:	485e      	ldr	r0, [pc, #376]	; (800498c <_printf_i+0x244>)
 8004814:	e019      	b.n	800484a <_printf_i+0x102>
 8004816:	f015 0f40 	tst.w	r5, #64	; 0x40
 800481a:	6805      	ldr	r5, [r0, #0]
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	bf18      	it	ne
 8004820:	b22d      	sxthne	r5, r5
 8004822:	e7ef      	b.n	8004804 <_printf_i+0xbc>
 8004824:	680b      	ldr	r3, [r1, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	1d18      	adds	r0, r3, #4
 800482a:	6008      	str	r0, [r1, #0]
 800482c:	0628      	lsls	r0, r5, #24
 800482e:	d501      	bpl.n	8004834 <_printf_i+0xec>
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	e002      	b.n	800483a <_printf_i+0xf2>
 8004834:	0669      	lsls	r1, r5, #25
 8004836:	d5fb      	bpl.n	8004830 <_printf_i+0xe8>
 8004838:	881d      	ldrh	r5, [r3, #0]
 800483a:	2f6f      	cmp	r7, #111	; 0x6f
 800483c:	bf0c      	ite	eq
 800483e:	2308      	moveq	r3, #8
 8004840:	230a      	movne	r3, #10
 8004842:	4852      	ldr	r0, [pc, #328]	; (800498c <_printf_i+0x244>)
 8004844:	2100      	movs	r1, #0
 8004846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484a:	6866      	ldr	r6, [r4, #4]
 800484c:	2e00      	cmp	r6, #0
 800484e:	bfa8      	it	ge
 8004850:	6821      	ldrge	r1, [r4, #0]
 8004852:	60a6      	str	r6, [r4, #8]
 8004854:	bfa4      	itt	ge
 8004856:	f021 0104 	bicge.w	r1, r1, #4
 800485a:	6021      	strge	r1, [r4, #0]
 800485c:	b90d      	cbnz	r5, 8004862 <_printf_i+0x11a>
 800485e:	2e00      	cmp	r6, #0
 8004860:	d04d      	beq.n	80048fe <_printf_i+0x1b6>
 8004862:	4616      	mov	r6, r2
 8004864:	fbb5 f1f3 	udiv	r1, r5, r3
 8004868:	fb03 5711 	mls	r7, r3, r1, r5
 800486c:	5dc7      	ldrb	r7, [r0, r7]
 800486e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004872:	462f      	mov	r7, r5
 8004874:	42bb      	cmp	r3, r7
 8004876:	460d      	mov	r5, r1
 8004878:	d9f4      	bls.n	8004864 <_printf_i+0x11c>
 800487a:	2b08      	cmp	r3, #8
 800487c:	d10b      	bne.n	8004896 <_printf_i+0x14e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	07df      	lsls	r7, r3, #31
 8004882:	d508      	bpl.n	8004896 <_printf_i+0x14e>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	6861      	ldr	r1, [r4, #4]
 8004888:	4299      	cmp	r1, r3
 800488a:	bfde      	ittt	le
 800488c:	2330      	movle	r3, #48	; 0x30
 800488e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004896:	1b92      	subs	r2, r2, r6
 8004898:	6122      	str	r2, [r4, #16]
 800489a:	464b      	mov	r3, r9
 800489c:	4621      	mov	r1, r4
 800489e:	4640      	mov	r0, r8
 80048a0:	f8cd a000 	str.w	sl, [sp]
 80048a4:	aa03      	add	r2, sp, #12
 80048a6:	f7ff fedf 	bl	8004668 <_printf_common>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d14c      	bne.n	8004948 <_printf_i+0x200>
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	b004      	add	sp, #16
 80048b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b8:	4834      	ldr	r0, [pc, #208]	; (800498c <_printf_i+0x244>)
 80048ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048be:	680e      	ldr	r6, [r1, #0]
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80048c6:	061f      	lsls	r7, r3, #24
 80048c8:	600e      	str	r6, [r1, #0]
 80048ca:	d514      	bpl.n	80048f6 <_printf_i+0x1ae>
 80048cc:	07d9      	lsls	r1, r3, #31
 80048ce:	bf44      	itt	mi
 80048d0:	f043 0320 	orrmi.w	r3, r3, #32
 80048d4:	6023      	strmi	r3, [r4, #0]
 80048d6:	b91d      	cbnz	r5, 80048e0 <_printf_i+0x198>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	2310      	movs	r3, #16
 80048e2:	e7af      	b.n	8004844 <_printf_i+0xfc>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	f043 0320 	orr.w	r3, r3, #32
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	2378      	movs	r3, #120	; 0x78
 80048ee:	4828      	ldr	r0, [pc, #160]	; (8004990 <_printf_i+0x248>)
 80048f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f4:	e7e3      	b.n	80048be <_printf_i+0x176>
 80048f6:	065e      	lsls	r6, r3, #25
 80048f8:	bf48      	it	mi
 80048fa:	b2ad      	uxthmi	r5, r5
 80048fc:	e7e6      	b.n	80048cc <_printf_i+0x184>
 80048fe:	4616      	mov	r6, r2
 8004900:	e7bb      	b.n	800487a <_printf_i+0x132>
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	6826      	ldr	r6, [r4, #0]
 8004906:	1d1d      	adds	r5, r3, #4
 8004908:	6960      	ldr	r0, [r4, #20]
 800490a:	600d      	str	r5, [r1, #0]
 800490c:	0635      	lsls	r5, r6, #24
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	d501      	bpl.n	8004916 <_printf_i+0x1ce>
 8004912:	6018      	str	r0, [r3, #0]
 8004914:	e002      	b.n	800491c <_printf_i+0x1d4>
 8004916:	0671      	lsls	r1, r6, #25
 8004918:	d5fb      	bpl.n	8004912 <_printf_i+0x1ca>
 800491a:	8018      	strh	r0, [r3, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	4616      	mov	r6, r2
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	e7ba      	b.n	800489a <_printf_i+0x152>
 8004924:	680b      	ldr	r3, [r1, #0]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	600a      	str	r2, [r1, #0]
 800492a:	681e      	ldr	r6, [r3, #0]
 800492c:	2100      	movs	r1, #0
 800492e:	4630      	mov	r0, r6
 8004930:	6862      	ldr	r2, [r4, #4]
 8004932:	f000 f82f 	bl	8004994 <memchr>
 8004936:	b108      	cbz	r0, 800493c <_printf_i+0x1f4>
 8004938:	1b80      	subs	r0, r0, r6
 800493a:	6060      	str	r0, [r4, #4]
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2300      	movs	r3, #0
 8004942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004946:	e7a8      	b.n	800489a <_printf_i+0x152>
 8004948:	4632      	mov	r2, r6
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	47d0      	blx	sl
 8004952:	3001      	adds	r0, #1
 8004954:	d0ab      	beq.n	80048ae <_printf_i+0x166>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	079b      	lsls	r3, r3, #30
 800495a:	d413      	bmi.n	8004984 <_printf_i+0x23c>
 800495c:	68e0      	ldr	r0, [r4, #12]
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	4298      	cmp	r0, r3
 8004962:	bfb8      	it	lt
 8004964:	4618      	movlt	r0, r3
 8004966:	e7a4      	b.n	80048b2 <_printf_i+0x16a>
 8004968:	2301      	movs	r3, #1
 800496a:	4632      	mov	r2, r6
 800496c:	4649      	mov	r1, r9
 800496e:	4640      	mov	r0, r8
 8004970:	47d0      	blx	sl
 8004972:	3001      	adds	r0, #1
 8004974:	d09b      	beq.n	80048ae <_printf_i+0x166>
 8004976:	3501      	adds	r5, #1
 8004978:	68e3      	ldr	r3, [r4, #12]
 800497a:	9903      	ldr	r1, [sp, #12]
 800497c:	1a5b      	subs	r3, r3, r1
 800497e:	42ab      	cmp	r3, r5
 8004980:	dcf2      	bgt.n	8004968 <_printf_i+0x220>
 8004982:	e7eb      	b.n	800495c <_printf_i+0x214>
 8004984:	2500      	movs	r5, #0
 8004986:	f104 0619 	add.w	r6, r4, #25
 800498a:	e7f5      	b.n	8004978 <_printf_i+0x230>
 800498c:	08004ca5 	.word	0x08004ca5
 8004990:	08004cb6 	.word	0x08004cb6

08004994 <memchr>:
 8004994:	4603      	mov	r3, r0
 8004996:	b510      	push	{r4, lr}
 8004998:	b2c9      	uxtb	r1, r1
 800499a:	4402      	add	r2, r0
 800499c:	4293      	cmp	r3, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	d101      	bne.n	80049a6 <memchr+0x12>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e003      	b.n	80049ae <memchr+0x1a>
 80049a6:	7804      	ldrb	r4, [r0, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	428c      	cmp	r4, r1
 80049ac:	d1f6      	bne.n	800499c <memchr+0x8>
 80049ae:	bd10      	pop	{r4, pc}

080049b0 <memcpy>:
 80049b0:	440a      	add	r2, r1
 80049b2:	4291      	cmp	r1, r2
 80049b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b8:	d100      	bne.n	80049bc <memcpy+0xc>
 80049ba:	4770      	bx	lr
 80049bc:	b510      	push	{r4, lr}
 80049be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049c2:	4291      	cmp	r1, r2
 80049c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c8:	d1f9      	bne.n	80049be <memcpy+0xe>
 80049ca:	bd10      	pop	{r4, pc}

080049cc <memmove>:
 80049cc:	4288      	cmp	r0, r1
 80049ce:	b510      	push	{r4, lr}
 80049d0:	eb01 0402 	add.w	r4, r1, r2
 80049d4:	d902      	bls.n	80049dc <memmove+0x10>
 80049d6:	4284      	cmp	r4, r0
 80049d8:	4623      	mov	r3, r4
 80049da:	d807      	bhi.n	80049ec <memmove+0x20>
 80049dc:	1e43      	subs	r3, r0, #1
 80049de:	42a1      	cmp	r1, r4
 80049e0:	d008      	beq.n	80049f4 <memmove+0x28>
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ea:	e7f8      	b.n	80049de <memmove+0x12>
 80049ec:	4601      	mov	r1, r0
 80049ee:	4402      	add	r2, r0
 80049f0:	428a      	cmp	r2, r1
 80049f2:	d100      	bne.n	80049f6 <memmove+0x2a>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049fe:	e7f7      	b.n	80049f0 <memmove+0x24>

08004a00 <_free_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d043      	beq.n	8004a90 <_free_r+0x90>
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f0c      	subs	r4, r1, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	18e4      	addlt	r4, r4, r3
 8004a14:	f000 f8d0 	bl	8004bb8 <__malloc_lock>
 8004a18:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <_free_r+0x94>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	b933      	cbnz	r3, 8004a2e <_free_r+0x2e>
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	6014      	str	r4, [r2, #0]
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 b8cb 	b.w	8004bc4 <__malloc_unlock>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d90a      	bls.n	8004a48 <_free_r+0x48>
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	1862      	adds	r2, r4, r1
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bf01      	itttt	eq
 8004a3a:	681a      	ldreq	r2, [r3, #0]
 8004a3c:	685b      	ldreq	r3, [r3, #4]
 8004a3e:	1852      	addeq	r2, r2, r1
 8004a40:	6022      	streq	r2, [r4, #0]
 8004a42:	6063      	str	r3, [r4, #4]
 8004a44:	6004      	str	r4, [r0, #0]
 8004a46:	e7ed      	b.n	8004a24 <_free_r+0x24>
 8004a48:	461a      	mov	r2, r3
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b10b      	cbz	r3, 8004a52 <_free_r+0x52>
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	d9fa      	bls.n	8004a48 <_free_r+0x48>
 8004a52:	6811      	ldr	r1, [r2, #0]
 8004a54:	1850      	adds	r0, r2, r1
 8004a56:	42a0      	cmp	r0, r4
 8004a58:	d10b      	bne.n	8004a72 <_free_r+0x72>
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	4401      	add	r1, r0
 8004a5e:	1850      	adds	r0, r2, r1
 8004a60:	4283      	cmp	r3, r0
 8004a62:	6011      	str	r1, [r2, #0]
 8004a64:	d1de      	bne.n	8004a24 <_free_r+0x24>
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	6053      	str	r3, [r2, #4]
 8004a70:	e7d8      	b.n	8004a24 <_free_r+0x24>
 8004a72:	d902      	bls.n	8004a7a <_free_r+0x7a>
 8004a74:	230c      	movs	r3, #12
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	e7d4      	b.n	8004a24 <_free_r+0x24>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	1821      	adds	r1, r4, r0
 8004a7e:	428b      	cmp	r3, r1
 8004a80:	bf01      	itttt	eq
 8004a82:	6819      	ldreq	r1, [r3, #0]
 8004a84:	685b      	ldreq	r3, [r3, #4]
 8004a86:	1809      	addeq	r1, r1, r0
 8004a88:	6021      	streq	r1, [r4, #0]
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	6054      	str	r4, [r2, #4]
 8004a8e:	e7c9      	b.n	8004a24 <_free_r+0x24>
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	200000f0 	.word	0x200000f0

08004a98 <_malloc_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	1ccd      	adds	r5, r1, #3
 8004a9c:	f025 0503 	bic.w	r5, r5, #3
 8004aa0:	3508      	adds	r5, #8
 8004aa2:	2d0c      	cmp	r5, #12
 8004aa4:	bf38      	it	cc
 8004aa6:	250c      	movcc	r5, #12
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	4606      	mov	r6, r0
 8004aac:	db01      	blt.n	8004ab2 <_malloc_r+0x1a>
 8004aae:	42a9      	cmp	r1, r5
 8004ab0:	d903      	bls.n	8004aba <_malloc_r+0x22>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aba:	f000 f87d 	bl	8004bb8 <__malloc_lock>
 8004abe:	4921      	ldr	r1, [pc, #132]	; (8004b44 <_malloc_r+0xac>)
 8004ac0:	680a      	ldr	r2, [r1, #0]
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	b99c      	cbnz	r4, 8004aee <_malloc_r+0x56>
 8004ac6:	4f20      	ldr	r7, [pc, #128]	; (8004b48 <_malloc_r+0xb0>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b923      	cbnz	r3, 8004ad6 <_malloc_r+0x3e>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f862 	bl	8004b98 <_sbrk_r>
 8004ad4:	6038      	str	r0, [r7, #0]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f000 f85d 	bl	8004b98 <_sbrk_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d123      	bne.n	8004b2a <_malloc_r+0x92>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	f000 f86c 	bl	8004bc4 <__malloc_unlock>
 8004aec:	e7e3      	b.n	8004ab6 <_malloc_r+0x1e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	1b5b      	subs	r3, r3, r5
 8004af2:	d417      	bmi.n	8004b24 <_malloc_r+0x8c>
 8004af4:	2b0b      	cmp	r3, #11
 8004af6:	d903      	bls.n	8004b00 <_malloc_r+0x68>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	441c      	add	r4, r3
 8004afc:	6025      	str	r5, [r4, #0]
 8004afe:	e004      	b.n	8004b0a <_malloc_r+0x72>
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	42a2      	cmp	r2, r4
 8004b04:	bf0c      	ite	eq
 8004b06:	600b      	streq	r3, [r1, #0]
 8004b08:	6053      	strne	r3, [r2, #4]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f000 f85a 	bl	8004bc4 <__malloc_unlock>
 8004b10:	f104 000b 	add.w	r0, r4, #11
 8004b14:	1d23      	adds	r3, r4, #4
 8004b16:	f020 0007 	bic.w	r0, r0, #7
 8004b1a:	1ac2      	subs	r2, r0, r3
 8004b1c:	d0cc      	beq.n	8004ab8 <_malloc_r+0x20>
 8004b1e:	1a1b      	subs	r3, r3, r0
 8004b20:	50a3      	str	r3, [r4, r2]
 8004b22:	e7c9      	b.n	8004ab8 <_malloc_r+0x20>
 8004b24:	4622      	mov	r2, r4
 8004b26:	6864      	ldr	r4, [r4, #4]
 8004b28:	e7cc      	b.n	8004ac4 <_malloc_r+0x2c>
 8004b2a:	1cc4      	adds	r4, r0, #3
 8004b2c:	f024 0403 	bic.w	r4, r4, #3
 8004b30:	42a0      	cmp	r0, r4
 8004b32:	d0e3      	beq.n	8004afc <_malloc_r+0x64>
 8004b34:	1a21      	subs	r1, r4, r0
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 f82e 	bl	8004b98 <_sbrk_r>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1dd      	bne.n	8004afc <_malloc_r+0x64>
 8004b40:	e7cf      	b.n	8004ae2 <_malloc_r+0x4a>
 8004b42:	bf00      	nop
 8004b44:	200000f0 	.word	0x200000f0
 8004b48:	200000f4 	.word	0x200000f4

08004b4c <_realloc_r>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	4607      	mov	r7, r0
 8004b50:	4614      	mov	r4, r2
 8004b52:	460e      	mov	r6, r1
 8004b54:	b921      	cbnz	r1, 8004b60 <_realloc_r+0x14>
 8004b56:	4611      	mov	r1, r2
 8004b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b5c:	f7ff bf9c 	b.w	8004a98 <_malloc_r>
 8004b60:	b922      	cbnz	r2, 8004b6c <_realloc_r+0x20>
 8004b62:	f7ff ff4d 	bl	8004a00 <_free_r>
 8004b66:	4625      	mov	r5, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b6c:	f000 f830 	bl	8004bd0 <_malloc_usable_size_r>
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d20f      	bcs.n	8004b94 <_realloc_r+0x48>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4638      	mov	r0, r7
 8004b78:	f7ff ff8e 	bl	8004a98 <_malloc_r>
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0f2      	beq.n	8004b68 <_realloc_r+0x1c>
 8004b82:	4631      	mov	r1, r6
 8004b84:	4622      	mov	r2, r4
 8004b86:	f7ff ff13 	bl	80049b0 <memcpy>
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ff37 	bl	8004a00 <_free_r>
 8004b92:	e7e9      	b.n	8004b68 <_realloc_r+0x1c>
 8004b94:	4635      	mov	r5, r6
 8004b96:	e7e7      	b.n	8004b68 <_realloc_r+0x1c>

08004b98 <_sbrk_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4d05      	ldr	r5, [pc, #20]	; (8004bb4 <_sbrk_r+0x1c>)
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fc fcea 	bl	800157c <_sbrk>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_sbrk_r+0x1a>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_sbrk_r+0x1a>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	2000024c 	.word	0x2000024c

08004bb8 <__malloc_lock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__malloc_lock+0x8>)
 8004bba:	f000 b811 	b.w	8004be0 <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20000254 	.word	0x20000254

08004bc4 <__malloc_unlock>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__malloc_unlock+0x8>)
 8004bc6:	f000 b80c 	b.w	8004be2 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20000254 	.word	0x20000254

08004bd0 <_malloc_usable_size_r>:
 8004bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd4:	1f18      	subs	r0, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfbc      	itt	lt
 8004bda:	580b      	ldrlt	r3, [r1, r0]
 8004bdc:	18c0      	addlt	r0, r0, r3
 8004bde:	4770      	bx	lr

08004be0 <__retarget_lock_acquire_recursive>:
 8004be0:	4770      	bx	lr

08004be2 <__retarget_lock_release_recursive>:
 8004be2:	4770      	bx	lr

08004be4 <_init>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr

08004bf0 <_fini>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr
